{"version":3,"sources":["../../src/functions/block.ts","../../src/functions/logger.ts","../../src/functions/common.ts","../../src/functions/contextHelpers.ts","../../src/functions/contracts.ts","../../src/functions/ethers.ts","../../src/constants/accounts.ts","../../src/constants/chain.ts","../../src/functions/extrinsics.ts","../../src/functions/jumping.ts","../../src/functions/logging.ts","../../src/functions/providers.ts","../../src/functions/viem.ts"],"sourcesContent":["import \"@moonbeam-network/api-augment\";\nimport type { ApiPromise } from \"@polkadot/api\";\nimport type { TxWithEvent } from \"@polkadot/api-derive/types\";\nimport type { Option, u32, u64 } from \"@polkadot/types\";\nimport type { ITuple } from \"@polkadot/types-codec/types\";\nimport type {\n  BlockHash,\n  DispatchError,\n  DispatchInfo,\n  Event,\n  Extrinsic,\n  RuntimeDispatchInfo,\n  RuntimeDispatchInfoV1,\n} from \"@polkadot/types/interfaces\";\nimport type { Block, SignedBlock } from \"@polkadot/types/interfaces/runtime/types\";\nimport type { FrameSystemEventRecord, SpWeightsWeightV2Weight } from \"@polkadot/types/lookup\";\nimport Bottleneck from \"bottleneck\";\nimport { createLogger } from \"./logger\";\nconst logger = createLogger({ name: \"test:blocks\" });\nconst debug = logger.debug.bind(logger);\n\nexport async function createAndFinalizeBlock(\n  api: ApiPromise,\n  parentHash?: string,\n  finalize = false\n): Promise<{\n  duration: number;\n  hash: string;\n  proofSize?: number;\n}> {\n  const startTime: number = Date.now();\n  // TODO: any/raw rpc request can be removed once api-augment is updated\n  const block: any = parentHash\n    ? await api.rpc(\"engine_createBlock\", true, finalize, parentHash)\n    : await api.rpc(\"engine_createBlock\", true, finalize);\n\n  return {\n    duration: Date.now() - startTime,\n    hash: block.hash as string, // toString doesn't work for block hashes\n    proofSize: block.proof_size as number, // TODO: casting can be removed once api-augment is updated\n  };\n}\n\n// Given a deposit amount, returns the amount burned (80%) and deposited to treasury (20%).\n// This is meant to precisely mimic the logic in the Moonbeam runtimes where the burn amount\n// is calculated and the treasury is treated as the remainder. This precision is important to\n// avoid off-by-one errors.\nexport function calculateFeePortions(amount: bigint): {\n  burnt: bigint;\n  treasury: bigint;\n} {\n  const burnt = (amount * 80n) / 100n; // 20% goes to treasury\n  return { burnt, treasury: amount - burnt };\n}\n\nexport interface TxWithEventAndFee extends TxWithEvent {\n  fee: RuntimeDispatchInfo | RuntimeDispatchInfoV1 | undefined;\n}\n\nexport interface BlockDetails {\n  block: Block;\n  txWithEvents: TxWithEventAndFee[];\n}\n\nexport interface BlockRangeOption {\n  from: number;\n  to: number;\n  concurrency?: number;\n}\n\nexport const getBlockExtrinsic = async (\n  api: ApiPromise,\n  blockHash: string | BlockHash,\n  section: string,\n  method: string\n): Promise<{\n  block: SignedBlock | any;\n  extrinsic: Extrinsic | null | any;\n  events: Event[];\n  resultEvent: Event | undefined;\n}> => {\n  const apiAt = await api.at(blockHash);\n  const [{ block }, records] = await Promise.all([\n    api.rpc.chain.getBlock(blockHash),\n    apiAt.query.system.events(),\n  ]);\n  const extIndex = block.extrinsics.findIndex(\n    (ext) => ext.method.section === section && ext.method.method === method\n  );\n  const extrinsic = extIndex > -1 ? block.extrinsics[extIndex] : null;\n  const events = (records as any)\n    .filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(extIndex))\n    .map(({ event }) => event);\n  const resultEvent = events.find(\n    (event) =>\n      event.section === \"system\" &&\n      (event.method === \"ExtrinsicSuccess\" || event.method === \"ExtrinsicFailed\")\n  );\n  return { block, extrinsic, events, resultEvent };\n};\n\nexport const getBlockTime = (signedBlock: any) =>\n  signedBlock.block.extrinsics\n    .find((item) => item.method.section === \"timestamp\")\n    .method.args[0].toNumber();\n\nexport const checkBlockFinalized = async (api: ApiPromise, number: number) => {\n  return {\n    number,\n    //@ts-expect-error - remove once pJs exposes this\n    finalized: await api._rpcCore.provider.send(\"moon_isBlockFinalized\", [\n      await api.rpc.chain.getBlockHash(number),\n    ]),\n  };\n};\n\nconst fetchBlockTime = async (api: ApiPromise, blockNum: number) => {\n  const hash = await api.rpc.chain.getBlockHash(blockNum);\n  const block = await api.rpc.chain.getBlock(hash);\n  return getBlockTime(block);\n};\n\nexport const fetchHistoricBlockNum = async (\n  api: ApiPromise,\n  blockNumber: number,\n  targetTime: number\n) => {\n  if (blockNumber <= 1) {\n    return 1;\n  }\n  const time = await fetchBlockTime(api, blockNumber);\n\n  if (time <= targetTime) {\n    return blockNumber;\n  }\n\n  return fetchHistoricBlockNum(\n    api,\n    blockNumber - Math.ceil((time - targetTime) / 30_000),\n    targetTime\n  );\n};\n\nexport const getBlockArray = async (\n  api: ApiPromise,\n  timePeriod: number,\n  bottleneck?: Bottleneck\n) => {\n  /**  \n  @brief Returns an sequential array of block numbers from a given period of time in the past\n  @param api Connected ApiPromise to perform queries on\n  @param timePeriod Moment in the past to search until\n  @param limiter Bottleneck rate limiter to throttle requests\n  */\n\n  let limiter = bottleneck;\n\n  if (!limiter) {\n    limiter = new Bottleneck({ maxConcurrent: 10, minTime: 100 });\n  }\n  const finalizedHead = await limiter.schedule(() => api.rpc.chain.getFinalizedHead());\n  const signedBlock: SignedBlock = await limiter.schedule(() =>\n    api.rpc.chain.getBlock(finalizedHead)\n  );\n\n  const lastBlockNumber = signedBlock.block.header.number.toNumber();\n  const lastBlockTime = getBlockTime(signedBlock);\n\n  const firstBlockTime = lastBlockTime - timePeriod;\n  debug(`Searching for the block at: ${new Date(firstBlockTime)}`);\n  const firstBlockNumber = (await limiter.wrap(fetchHistoricBlockNum)(\n    api,\n    lastBlockNumber,\n    firstBlockTime\n  )) as number;\n  const length = lastBlockNumber - firstBlockNumber;\n  return Array.from({ length }, (_, i) => firstBlockNumber + i);\n};\n\nexport function extractWeight(\n  weightV1OrV2: u64 | Option<u64> | SpWeightsWeightV2Weight | Option<any>\n) {\n  if (\"isSome\" in weightV1OrV2) {\n    const weight = weightV1OrV2.unwrap();\n    if (\"refTime\" in weight) {\n      return weight.refTime.unwrap();\n    }\n    return weight;\n  }\n  if (\"refTime\" in weightV1OrV2) {\n    return weightV1OrV2.refTime.unwrap();\n  }\n  return weightV1OrV2;\n}\n\nexport function extractPreimageDeposit(\n  request:\n    | Option<ITuple<any>>\n    | {\n        readonly deposit: ITuple<any>;\n        readonly len: u32;\n      }\n    | {\n        readonly deposit: Option<ITuple<any>>;\n        readonly count: u32;\n        readonly len: Option<u32>;\n      }\n) {\n  const deposit = \"deposit\" in request ? request.deposit : request;\n  if (\"isSome\" in deposit && deposit.isSome) {\n    return {\n      accountId: deposit.unwrap()[0].toHex(),\n      amount: deposit.unwrap()[1],\n    };\n  }\n  if (\"isNone\" in deposit && deposit.isNone) {\n    return undefined;\n  }\n  return {\n    accountId: deposit[0].toHex(),\n    amount: deposit[1],\n  };\n}\n\nexport function mapExtrinsics(\n  extrinsics: Extrinsic[],\n  records: FrameSystemEventRecord[],\n  fees?: RuntimeDispatchInfo[] | RuntimeDispatchInfoV1[]\n): TxWithEventAndFee[] {\n  return extrinsics.map((extrinsic, index): TxWithEventAndFee => {\n    let dispatchError: DispatchError | undefined;\n    let dispatchInfo: DispatchInfo | undefined;\n\n    const events = records\n      .filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index))\n      .map(({ event }) => {\n        if (event.section === \"system\") {\n          if (event.method === \"ExtrinsicSuccess\") {\n            dispatchInfo = event.data[0] as DispatchInfo;\n          } else if (event.method === \"ExtrinsicFailed\") {\n            dispatchError = event.data[0] as DispatchError;\n            dispatchInfo = event.data[1] as DispatchInfo;\n          }\n        }\n\n        return event;\n      });\n    return {\n      dispatchError,\n      dispatchInfo,\n      events,\n      extrinsic,\n      fee: fees ? fees[index] : undefined,\n    };\n  });\n}\n\nexport async function checkTimeSliceForUpgrades(\n  api: ApiPromise,\n  blockNumbers: number[],\n  currentVersion: u32\n) {\n  const apiAt = await api.at(await api.rpc.chain.getBlockHash(blockNumbers[0]));\n  const onChainRt = (await apiAt.query.system.lastRuntimeUpgrade()).unwrap().specVersion;\n  return { result: !onChainRt.eq(currentVersion), specVersion: onChainRt };\n}\n","import pino from \"pino\";\nimport type { Logger } from \"pino\";\nimport pinoPretty from \"pino-pretty\";\n\nexport interface LoggerOptions {\n  name: string;\n  level?: string;\n  enabled?: boolean;\n}\n\nconst logLevel = process.env.LOG_LEVEL || \"info\";\n\n// Create pretty stream for all contexts\nconst prettyStream = pinoPretty({\n  colorize: true,\n  translateTime: \"HH:MM:ss.l\",\n  ignore: \"pid,hostname\",\n  sync: true, // Important for worker threads\n});\n\nconst pinoOptions: pino.LoggerOptions = {\n  level: logLevel,\n  formatters: {\n    level: (label) => {\n      return { level: label };\n    },\n  },\n};\n\nconst loggers = new Map<string, Logger>();\n\nexport function createLogger(options: LoggerOptions): Logger {\n  const { name, level = logLevel, enabled = true } = options;\n\n  const existingLogger = loggers.get(name);\n  if (existingLogger) {\n    return existingLogger;\n  }\n\n  const loggerConfig: pino.LoggerOptions = {\n    name,\n    level,\n    enabled,\n    formatters: pinoOptions.formatters,\n  };\n\n  // Create logger with pretty stream\n  const logger = pino(loggerConfig, prettyStream);\n\n  loggers.set(name, logger);\n\n  return logger;\n}\n\nexport function getLogger(name: string): Logger | undefined {\n  return loggers.get(name);\n}\n\nexport function clearLoggers(): void {\n  loggers.clear();\n}\n\n// Helper function to enable/disable specific loggers\nexport function setLoggerEnabled(pattern: string, enabled: boolean): void {\n  const regex = new RegExp(pattern.replace(/\\*/g, \".*\"));\n\n  loggers.forEach((logger, name) => {\n    if (regex.test(name)) {\n      logger.level = enabled ? logLevel : \"silent\";\n    }\n  });\n}\n\n// Compatibility layer for the existing setupLogger function\nexport function setupLogger(name: string): pino.Logger {\n  const logger = createLogger({\n    name: `test:${name}`,\n    enabled: process.argv.includes(\"--printlogs\"),\n  });\n\n  return logger;\n}\n\n// Re-export types\nexport type { Logger } from \"pino\";\n","import \"@moonbeam-network/api-augment\";\nimport { BN } from \"@polkadot/util\";\n\n// Sort dict by key\nexport function sortObjectByKeys(obj: Record<string, any>): Record<string, any> {\n  const sortedKeys = Object.keys(obj).sort();\n  const sortedObj: Record<string, any> = {};\n\n  for (const key of sortedKeys) {\n    sortedObj[key] = obj[key];\n  }\n\n  return sortedObj;\n}\n\n// Perthings arithmetic conformant type.\nclass Perthing {\n  private unit: BN;\n  private perthing: BN;\n\n  constructor(unit: BN, num: BN | number, denom?: BN | number) {\n    let numerator = num;\n    let denominator = denom;\n\n    if (!(numerator instanceof BN)) {\n      numerator = new BN(numerator.toString());\n    }\n    if (denominator && !(denominator instanceof BN)) {\n      denominator = new BN(denominator.toString());\n    }\n\n    this.unit = unit;\n    if (denominator) {\n      this.perthing = numerator.mul(unit).div(denominator as BN);\n    } else {\n      this.perthing = numerator;\n    }\n  }\n\n  value(): BN {\n    return this.perthing;\n  }\n\n  of(value: BN): BN {\n    return this.divNearest(this.perthing.mul(value), this.unit);\n  }\n\n  ofCeil(value: BN): BN {\n    return this.divCeil(this.perthing.mul(value), this.unit);\n  }\n\n  toString(): string {\n    return `${this.perthing.toString()}`;\n  }\n\n  divCeil(a: any, num: BN) {\n    const dm = a.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  }\n\n  divNearest(a: any, num: BN) {\n    const dm = a.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    const mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    const half = num.ushrn(1);\n    const r2 = num.andln(1);\n    const cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp <= 0 || (r2 === new BN(1) && cmp === 0)) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  }\n}\n\n// Perthings arithmetic conformant type representing part(s) per billion.\nexport class Perbill extends Perthing {\n  constructor(numerator: BN | number, denominator?: BN | number) {\n    super(new BN(1_000_000_000), numerator, denominator);\n  }\n}\n\n// Perthings arithmetic conformant type representing part(s) per cent.\nexport class Percent extends Perthing {\n  constructor(numerator: BN | number, denominator?: BN | number) {\n    super(new BN(100), numerator, denominator);\n  }\n}\n\nexport function getObjectMethods(obj: any): string[] {\n  const properties = new Set<string>();\n  let currentObj: any = obj;\n\n  while (currentObj) {\n    for (const item of Object.getOwnPropertyNames(currentObj)) {\n      properties.add(item);\n    }\n    currentObj = Object.getPrototypeOf(currentObj);\n  }\n\n  return Array.from(properties).filter((item) => typeof obj[item] === \"function\");\n}\n\nexport async function directRpcRequest(\n  endpoint: string,\n  method: string,\n  params: any[] = [],\n  timeoutMs: number = 10000 // Default 10 second timeout\n): Promise<any> {\n  const data = {\n    jsonrpc: \"2.0\",\n    id: 1,\n    method,\n    params,\n  };\n\n  if (endpoint.startsWith(\"ws\")) {\n    console.log(\"you've passed a websocket to fetch, is this intended?\");\n  }\n\n  // Create an AbortController for timeout\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), timeoutMs);\n\n  try {\n    const response = await fetch(endpoint, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: { \"Content-Type\": \"application/json\" },\n      signal: controller.signal,\n    });\n\n    clearTimeout(timeoutId);\n\n    const responseData = (await response.json()) as JsonRpcResponse;\n\n    if (responseData.error) {\n      throw new Error(responseData.error.message);\n    }\n\n    return responseData.result;\n  } catch (error: any) {\n    clearTimeout(timeoutId);\n    if (error.name === \"AbortError\") {\n      throw new Error(\n        `RPC request to ${endpoint} timed out after ${timeoutMs}ms (method: ${method})`\n      );\n    }\n    throw error;\n  }\n}\n\ninterface JsonRpcResponse {\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n  };\n}\n","import \"@moonbeam-network/api-augment\";\nimport type { u128 } from \"@polkadot/types-codec\";\nimport type {\n  AccountId20,\n  DispatchError,\n  DispatchInfo,\n  EventRecord,\n} from \"@polkadot/types/interfaces\";\n\n// export interface ExtrinsicCreation {\n//   extrinsic: GenericExtrinsic<AnyTuple>;\n//   events: EventRecord[];\n//   error: RegistryError;\n//   successful: boolean;\n//   hash: string;\n// }\n\nexport function filterAndApply<T>(\n  events: EventRecord[],\n  section: string,\n  methods: string[],\n  onFound: (record: EventRecord) => T\n): T[] {\n  return events\n    .filter(({ event }) => section === event.section && methods.includes(event.method))\n    .map((record) => onFound(record));\n}\n\nexport function getDispatchError({\n  event: {\n    data: [dispatchError],\n  },\n}: EventRecord): DispatchError {\n  return dispatchError as DispatchError;\n}\n\nfunction getDispatchInfo({ event: { data, method } }: EventRecord): DispatchInfo {\n  return method === \"ExtrinsicSuccess\" ? (data[0] as DispatchInfo) : (data[1] as DispatchInfo);\n}\n\nexport function extractError(events: EventRecord[] = []): DispatchError | undefined {\n  return filterAndApply(events, \"system\", [\"ExtrinsicFailed\"], getDispatchError)[0];\n}\n\n// export function extractFees(events: EventRecord[] = []): number {\n//   return filterAndApply(events, \"balances\", [\"Transfer\"], () => true).length;\n// }\n\nexport function isExtrinsicSuccessful(events: EventRecord[] = []): boolean {\n  return filterAndApply(events, \"system\", [\"ExtrinsicSuccess\"], () => true).length > 0;\n}\n\nexport function extractInfo(events: EventRecord[] = []): DispatchInfo | undefined {\n  return filterAndApply(\n    events,\n    \"system\",\n    [\"ExtrinsicFailed\", \"ExtrinsicSuccess\"],\n    getDispatchInfo\n  )[0];\n}\n\nexport function extractFee(events: EventRecord[] = []) {\n  return filterAndApply(\n    events,\n    \"balances\",\n    [\"Withdraw\"],\n    ({ event }: EventRecord) => event.data as unknown as { who: AccountId20; amount: u128 }\n  )[0];\n}\n","import type { CompiledContract } from \"@moonwall/types\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\nimport type { Abi } from \"viem\";\n\nexport function getAllCompiledContracts(contractsDir = \"./\", recurse = false): string[] {\n  const contractsPath = path.isAbsolute(contractsDir)\n    ? contractsDir\n    : path.join(process.cwd(), contractsDir);\n  const contracts = fs.readdirSync(contractsPath, { withFileTypes: true });\n\n  let contractNames: string[] = [];\n\n  for (const dirent of contracts) {\n    const fullDirentPath = path.join(contractsPath, dirent.name);\n\n    if (dirent.isDirectory() && recurse) {\n      contractNames = contractNames.concat(getAllCompiledContracts(fullDirentPath, recurse));\n    } else if (dirent.isFile() && path.extname(dirent.name) === \".json\") {\n      contractNames.push(path.basename(dirent.name, \".json\"));\n    }\n  }\n\n  return contractNames;\n}\n\nexport function getCompiled<TAbi extends Abi>(contractPath: string): CompiledContract<TAbi> {\n  const filePath = path.join(process.cwd(), `${contractPath}.json`);\n  if (!fs.existsSync(filePath)) {\n    throw new Error(`Contract name (${contractPath}) doesn't exist in test suite`);\n  }\n\n  try {\n    const json = fs.readFileSync(filePath, \"utf8\");\n    return JSON.parse(json);\n  } catch (e) {\n    throw new Error(\n      `Contract name ${contractPath} is not compiled. Please check compiled json exists`\n    );\n  }\n}\n","import type { GenericContext, EthersTransactionOptions } from \"@moonwall/types\";\nimport { type AccessListish, type BigNumberish, type TransactionRequest, Wallet } from \"ethers\";\nimport type { TransactionType } from \"@moonwall/types\";\nimport { ALITH_ADDRESS } from \"../constants/accounts\";\n\ntype TransactionHandler = (blob: TransactionBlob, params: TransactionRequest) => void;\n\ninterface TransactionBlob {\n  gasPrice?: BigNumberish;\n  gasLimit?: BigNumberish;\n  accessList?: AccessListish; // Replace any[] with a more specific type if you have one\n  maxFeePerGas?: BigNumberish;\n  maxPriorityFeePerGas?: BigNumberish;\n  type?: number;\n}\n\nconst transactionHandlers: Record<TransactionType, TransactionHandler> = {\n  legacy: (blob, params) => {\n    blob.gasPrice = params.gasPrice || \"10000000000\";\n    blob.gasLimit = params.gasLimit || \"200000\";\n    blob.type = 0;\n  },\n  eip2930: (blob, params) => {\n    blob.gasPrice = params.gasPrice || \"10000000000\";\n    blob.gasLimit = params.gasLimit || \"200000\";\n    blob.accessList = params.accessList || [];\n    blob.type = 1;\n  },\n  eip1559: (blob, params) => {\n    blob.accessList = params.accessList || [];\n    blob.maxFeePerGas = params.maxFeePerGas || \"10000000000\";\n    blob.maxPriorityFeePerGas = params.maxPriorityFeePerGas || 0;\n    blob.gasLimit = params.gasLimit || \"200000\";\n    blob.type = 2;\n  },\n};\n\nexport async function createEthersTransaction<TOptions extends EthersTransactionOptions>(\n  context: GenericContext,\n  params: TOptions\n) {\n  // const nonce = await context.viem().getTransactionCount({ address: ALITH_ADDRESS });\n  const nonce =\n    \"nonce\" in params\n      ? params.nonce\n      : await context.viem().getTransactionCount({ address: ALITH_ADDRESS });\n  const blob: object = { nonce, ...params };\n\n  const handler = transactionHandlers[params.txnType || \"legacy\"];\n  if (!handler) {\n    throw new Error(\"Unknown transaction type, update createRawEthersTxn fn\");\n  }\n\n  handler(blob, params);\n\n  const signer = params.privateKey\n    ? new Wallet(params.privateKey, context.ethers().provider)\n    : context.ethers();\n\n  const txn = await signer.populateTransaction(blob);\n  return (await signer.signTransaction(txn)) as `0x${string}`;\n}\n","import \"@moonbeam-network/api-augment\";\nimport { Keyring } from \"@polkadot/api\";\nimport { DEFAULT_GENESIS_BALANCE, DEFAULT_GENESIS_MAPPING, DEFAULT_GENESIS_STAKING } from \"./chain\";\nimport type { KeyringPair } from \"@polkadot/keyring/types\";\n\nconst keyringEth = new Keyring({ type: \"ethereum\" });\nconst keyringEd25519 = new Keyring({ type: \"ed25519\" });\nconst keyringSr25519 = new Keyring({ type: \"sr25519\" });\n\n// Prefunded accounts.\nexport const ALITH_ADDRESS: `0x${string}` = \"0xf24FF3a9CF04c71Dbc94D0b566f7A27B94566cac\";\nexport const ALITH_PRIVATE_KEY: `0x${string}` =\n  \"0x5fb92d6e98884f76de468fa3f6278f8807c48bebc13595d45af5bdc4da702133\";\nexport const ALITH_SESSION_ADDRESS: `0x${string}` =\n  \"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\";\nexport const ALITH_CONTRACT_ADDRESSES: `0x${string}`[] = [\n  \"0xc01Ee7f10EA4aF4673cFff62710E1D7792aBa8f3\",\n  \"0x970951a12F975E6762482ACA81E57D5A2A4e73F4\",\n  \"0x3ed62137c5DB927cb137c26455969116BF0c23Cb\",\n  \"0x962c0940d72E7Db6c9a5F81f1cA87D8DB2B82A23\",\n  \"0x5CC307268a1393AB9A764A20DACE848AB8275c46\",\n  \"0xeAB4eEBa1FF8504c124D031F6844AD98d07C318f\",\n];\n\nexport const BALTATHAR_ADDRESS: `0x${string}` = \"0x3Cd0A705a2DC65e5b1E1205896BaA2be8A07c6e0\";\nexport const BALTATHAR_PRIVATE_KEY: `0x${string}` =\n  \"0x8075991ce870b93a8870eca0c0f91913d12f47948ca0fd25b49c6fa7cdbeee8b\";\nexport const BALTATHAR_SESSION_ADDRESS: `0x${string}` =\n  \"0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48\";\n\nexport const CHARLETH_ADDRESS: `0x${string}` = \"0x798d4Ba9baf0064Ec19eB4F0a1a45785ae9D6DFc\";\nexport const CHARLETH_PRIVATE_KEY: `0x${string}` =\n  \"0x0b6e18cafb6ed99687ec547bd28139cafdd2bffe70e6b688025de6b445aa5c5b\";\nexport const CHARLETH_SESSION_ADDRESS: `0x${string}` =\n  \"0x90b5ab205c6974c9ea841be688864633dc9ca8a357843eeacf2314649965fe22\";\n\nexport const DOROTHY_ADDRESS: `0x${string}` = \"0x773539d4Ac0e786233D90A233654ccEE26a613D9\";\nexport const DOROTHY_PRIVATE_KEY: `0x${string}` =\n  \"0x39539ab1876910bbf3a223d84a29e28f1cb4e2e456503e7e91ed39b2e7223d68\";\n\nexport const ETHAN_ADDRESS: `0x${string}` = \"0xFf64d3F6efE2317EE2807d223a0Bdc4c0c49dfDB\";\nexport const ETHAN_PRIVATE_KEY: `0x${string}` =\n  \"0x7dce9bc8babb68fec1409be38c8e1a52650206a7ed90ff956ae8a6d15eeaaef4\";\n\nexport const FAITH_ADDRESS: `0x${string}` = \"0xC0F0f4ab324C46e55D02D0033343B4Be8A55532d\";\nexport const FAITH_PRIVATE_KEY: `0x${string}` =\n  \"0xb9d2ea9a615f3165812e8d44de0d24da9bbd164b65c4f0573e1ce2c8dbd9c8df\";\n\nexport const GOLIATH_ADDRESS: `0x${string}` = \"0x7BF369283338E12C90514468aa3868A551AB2929\";\nexport const GOLIATH_PRIVATE_KEY: `0x${string}` =\n  \"0x96b8a38e12e1a31dee1eab2fffdf9d9990045f5b37e44d8cc27766ef294acf18\";\n\n// Deprecated\nexport const GERALD_ADDRESS: `0x${string}` = \"0x6Be02d1d3665660d22FF9624b7BE0551ee1Ac91b\";\nexport const GERALD_PRIVATE_KEY: `0x${string}` =\n  \"0x99B3C12287537E38C90A9219D4CB074A89A16E9CDB20BF85728EBD97C343E342\";\nexport const GERALD_CONTRACT_ADDRESSES: `0x${string}`[] = [\n  \"0xC2Bf5F29a4384b1aB0C063e1c666f02121B6084a\",\n  \"0x5c4242beB94dE30b922f57241f1D02f36e906915\",\n  \"0x42e2EE7Ba8975c473157634Ac2AF4098190fc741\",\n  \"0xF8cef78E923919054037a1D03662bBD884fF4edf\",\n  \"0xe573BCA813c741229ffB2488F7856C6cAa841041\",\n  \"0xBb0CC0fb3e0c06725c67167501f850B4900D6DB5\",\n];\n\n// This is Alice0x6Be02d1d3665660d22FF9624b7BE0551ee1Ac91b\nexport const ALITH_GENESIS_FREE_BALANCE = DEFAULT_GENESIS_BALANCE - DEFAULT_GENESIS_MAPPING;\nexport const ALITH_GENESIS_LOCK_BALANCE = DEFAULT_GENESIS_STAKING;\nexport const ALITH_GENESIS_RESERVE_BALANCE = DEFAULT_GENESIS_MAPPING;\nexport const ALITH_GENESIS_TRANSFERABLE_BALANCE =\n  ALITH_GENESIS_FREE_BALANCE - ALITH_GENESIS_LOCK_BALANCE;\n\nexport const alith: KeyringPair = keyringEth.addFromUri(ALITH_PRIVATE_KEY);\nexport const baltathar: KeyringPair = keyringEth.addFromUri(BALTATHAR_PRIVATE_KEY);\nexport const charleth: KeyringPair = keyringEth.addFromUri(CHARLETH_PRIVATE_KEY);\nexport const dorothy: KeyringPair = keyringEth.addFromUri(DOROTHY_PRIVATE_KEY);\nexport const ethan: KeyringPair = keyringEth.addFromUri(ETHAN_PRIVATE_KEY);\nexport const faith: KeyringPair = keyringEth.addFromUri(FAITH_PRIVATE_KEY);\nexport const goliath: KeyringPair = keyringEth.addFromUri(GOLIATH_PRIVATE_KEY);\n\n// deprecated\nexport const gerald: KeyringPair = keyringEth.addFromUri(GERALD_PRIVATE_KEY);\n\nlet accountSeed = 10000;\nexport function generateKeyringPair(\n  type: \"ethereum\" | \"sr25519\" | \"ed25519\" = \"ethereum\",\n  privateKey?: string\n): KeyringPair {\n  const key = privateKey || `0xDEADBEEF${(accountSeed++).toString(16).padStart(56, \"0\")}`;\n  if (type === \"sr25519\") {\n    return keyringSr25519.addFromUri(key);\n  }\n  if (type === \"ed25519\") {\n    return keyringEd25519.addFromUri(key);\n  }\n  return keyringEth.addFromUri(key);\n}\n","import \"@moonbeam-network/api-augment\";\nexport const SPECS_PATH = \"./moonbeam-test-specs\";\n\nexport const DEBUG_MODE = process.env.DEBUG_MODE || false;\nexport const DISPLAY_LOG = process.env.MOONBEAM_LOG || false;\nexport const MOONBEAM_LOG = process.env.MOONBEAM_LOG || \"info\";\n\nexport const BASE_PATH = process.env.BASE_PATH;\nexport const CUSTOM_SPEC_PATH = process.env.CUSTOM_SPEC_PATH;\nexport const BINARY_PATH = process.env.BINARY_PATH || \"../target/release/moonbeam\";\nexport const RELAY_BINARY_PATH = process.env.RELAY_BINARY_PATH || \"../target/release/polkadot\";\nexport const RELAY_LOG = process.env.RELAY_LOG;\n\n// Is undefined by default as the path is dependent of the runtime.\nexport const OVERRIDE_RUNTIME_PATH = process.env.OVERRIDE_RUNTIME_PATH || undefined;\nexport const SPAWNING_TIME = 20000;\nexport const ETHAPI_CMD = process.env.ETHAPI_CMD || \"\";\nexport const WASM_RUNTIME_OVERRIDES = process.env.WASM_RUNTIME_OVERRIDES || \"\";\n\nexport const RELAY_CHAIN_NODE_NAMES = [\"Alice\", \"Bob\", \"Charlie\", \"Dave\", \"Eve\", \"Ferdie\", \"One\"];\n\n// Test variables\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nexport const TREASURY_ACCOUNT = \"0x6d6f646c70632f74727372790000000000000000\";\nexport const GLMR = 1_000_000_000_000_000_000n;\nexport const MILLIGLMR = 1_000_000_000_000_000n;\nexport const MICROGLMR = 1_000_000_000_000n;\nexport const DEFAULT_GENESIS_BALANCE = 2n ** 80n;\nexport const DEFAULT_GENESIS_STAKING = 1_000n * GLMR;\nexport const DEFAULT_GENESIS_MAPPING = 100n * GLMR;\nexport const PROPOSAL_AMOUNT = 1000n * GLMR;\nexport const VOTE_AMOUNT = 10n * GLMR;\nexport const MIN_GLMR_STAKING = 1000n * GLMR;\nexport const MIN_GLMR_DELEGATOR = 1n * GLMR;\n\n// Weight correspond to 1 picosecond\nexport const WEIGHT_PER_SECOND = 1_000_000_000_000n;\n\n// Current gas per second\nexport const GAS_PER_SECOND = 40_000_000n;\nexport const GAS_PER_WEIGHT = WEIGHT_PER_SECOND / GAS_PER_SECOND;\n\n// Maximum Gas to PoV ratio used in the gasometer\nexport const GAS_PER_POV_BYTES = 4n;\n\n// Our weight limit is 500ms.\nexport const BLOCK_WEIGHT_LIMIT = WEIGHT_PER_SECOND / 2n;\n\n// Block limit is 20M gas but only 75% is used for normal transactions, limiting to 15M Gas\nexport const BLOCK_GAS_LIMIT = BLOCK_WEIGHT_LIMIT / GAS_PER_WEIGHT;\n\n// Maximum extrinsic weight is taken from the max allowed transaction weight per block (75%),\n// minus the block initialization (10%) and minus the extrinsic base cost.\nexport const EXTRINSIC_GAS_LIMIT = (BLOCK_GAS_LIMIT * 3n) / 4n - BLOCK_GAS_LIMIT / 10n;\n\n// Maximum PoV size in bytes allowed for a manual sealing dev block by substrate.\nexport const MAX_BLOCK_DEV_POV = 4 * 1024 * 1024 + 512;\n\n// Maximum PoV size in bytes allowed by the gasometer for one ethereum transaction\nexport const MAX_ETH_POV_PER_TX = EXTRINSIC_GAS_LIMIT / GAS_PER_POV_BYTES;\n\nexport const EXTRINSIC_BASE_WEIGHT = 250_000_000;\n\n// Weight per gas mapping\nexport const WEIGHT_PER_GAS = 1_000_000_000_000n / 40_000_000n;\n\nexport const MIN_GAS_PRICE = 10_000_000_000n;\n\nexport const GAS_LIMIT_POV_RATIO = 4;\n\nexport const PRECOMPILE_PARACHAIN_STAKING_ADDRESS = \"0x0000000000000000000000000000000000000800\";\nexport const PRECOMPILE_CROWDLOAN_REWARDS_ADDRESS = \"0x0000000000000000000000000000000000000801\";\nexport const PRECOMPILE_NATIVE_ERC20_ADDRESS = \"0x0000000000000000000000000000000000000802\";\nexport const PRECOMPILE_DEMOCRACY_ADDRESS = \"0x0000000000000000000000000000000000000803\";\nexport const PRECOMPILE_XTOKENS_ADDRESS = \"0x0000000000000000000000000000000000000804\";\nexport const PRECOMPILE_RELAY_ENCODER_ADDRESS = \"0x0000000000000000000000000000000000000805\";\nexport const PRECOMPILE_XCM_TRANSACTOR_ADDRESS_V1 = \"0x0000000000000000000000000000000000000806\";\nexport const PRECOMPILE_AUTHOR_MAPPING_ADDRESS = \"0x0000000000000000000000000000000000000807\";\nexport const PRECOMPILE_BATCH_ADDRESS = \"0x0000000000000000000000000000000000000808\";\nexport const PRECOMPILE_RANDOMNESS_ADDRESS = \"0x0000000000000000000000000000000000000809\";\nexport const PRECOMPILE_CALL_PERMIT_ADDRESS = \"0x000000000000000000000000000000000000080a\";\nexport const PRECOMPILE_PROXY_ADDRESS = \"0x000000000000000000000000000000000000080b\";\nexport const PRECOMPILE_XCM_UTILS_ADDRESS = \"0x000000000000000000000000000000000000080c\";\nexport const PRECOMPILE_XCM_TRANSACTOR_ADDRESS_V2 = \"0x000000000000000000000000000000000000080d\";\nexport const PRECOMPILE_COUNCIL_ADDRESS = \"0x000000000000000000000000000000000000080e\";\nexport const PRECOMPILE_TECH_COMMITTEE_ADDRESS = \"0x000000000000000000000000000000000000080f\";\nexport const PRECOMPILE_TREASURY_COUNCIL_ADDRESS = \"0x0000000000000000000000000000000000000810\";\nexport const PRECOMPILE_DISPATCH_ADDRESS = \"0x0000000000000000000000000000000000000401\";\nexport const PRECOMPILE_REFERENDA_ADDRESS = \"0x0000000000000000000000000000000000000811\";\nexport const PRECOMPILE_CONVICTION_VOTING_ADDRESS = \"0x0000000000000000000000000000000000000812\";\nexport const PRECOMPILE_PREIMAGE_ADDRESS = \"0x0000000000000000000000000000000000000813\";\nexport const PRECOMPILE_OPEN_TECH_COMMITTEE_ADDRESS = \"0x0000000000000000000000000000000000000814\";\nexport const PRECOMPILE_GMP_ADDRESS = \"0x0000000000000000000000000000000000000816\";\n\nexport const PRECOMPILES = {\n  ParachainStaking: \"0x0000000000000000000000000000000000000800\",\n  CrowdloanRewards: \"0x0000000000000000000000000000000000000801\",\n  NativeErc20: [\"0x0000000000000000000000000000000000000802\", \"IERC20\"],\n  Democracy: \"0x0000000000000000000000000000000000000803\",\n  Xtokens: \"0x0000000000000000000000000000000000000804\",\n  RelayEncoder: \"0x0000000000000000000000000000000000000805\",\n  XcmTransactorV1: \"0x0000000000000000000000000000000000000806\",\n  AuthorMapping: \"0x0000000000000000000000000000000000000807\",\n  Batch: \"0x0000000000000000000000000000000000000808\",\n  Randomness: \"0x0000000000000000000000000000000000000809\",\n  CallPermit: \"0x000000000000000000000000000000000000080a\",\n  Proxy: \"0x000000000000000000000000000000000000080b\",\n  XcmUtils: \"0x000000000000000000000000000000000000080c\",\n  XcmTransactorV2: \"0x000000000000000000000000000000000000080d\",\n  Council: [\"0x000000000000000000000000000000000000080e\", \"Collective\"],\n  TechCommittee: [\"0x000000000000000000000000000000000000080f\", \"Collective\"],\n  TreasuryCouncil: [\"0x0000000000000000000000000000000000000810\", \"Collective\"],\n  // DISPATCH: \"0x0000000000000000000000000000000000000401\",\n  Referenda: \"0x0000000000000000000000000000000000000811\",\n  ConvictionVoting: \"0x0000000000000000000000000000000000000812\",\n  Preimage: \"0x0000000000000000000000000000000000000813\",\n  // OpenTechCommittee: \"0x0000000000000000000000000000000000000814\",\n  Gmp: \"0x0000000000000000000000000000000000000816\",\n} as const;\n\nexport const MINUTES = 60 / 12;\nexport const HOURS = MINUTES * 60;\nexport const DAYS = HOURS * 24;\n\nexport const TWO_MINS = 2 * 60 * 1000;\nexport const FIVE_MINS = 5 * 60 * 1000;\nexport const TEN_MINS = 10 * 60 * 1000;\nexport const THIRTY_MINS = 30 * 60 * 1000;\nexport const ONE_HOURS = 60 * 60 * 1000;\nexport const TWO_HOURS = 2 * 60 * 60 * 1000;\nexport const THREE_HOURS = 3 * 60 * 60 * 1000;\nexport const FOUR_HOURS = 4 * 60 * 60 * 1000;\n\nexport const CONTRACT_RANDOMNESS_STATUS_DOES_NOT_EXISTS = 0;\nexport const CONTRACT_RANDOMNESS_STATUS_PENDING = 1;\nexport const CONTRACT_RANDOMNESS_STATUS_READY = 2;\nexport const CONTRACT_RANDOMNESS_STATUS_EXPIRED = 3;\n\nexport const CONTRACT_PROXY_TYPE_ANY = 0;\nexport const CONTRACT_PROXY_TYPE_NON_TRANSFER = 1;\nexport const CONTRACT_PROXY_TYPE_GOVERNANCE = 2;\nexport const CONTRACT_PROXY_TYPE_STAKING = 3;\nexport const CONTRACT_PROXY_TYPE_CANCEL_PROXY = 4;\nexport const CONTRACT_PROXY_TYPE_BALANCES = 5;\nexport const CONTRACT_PROXY_TYPE_AUTHOR_MAPPING = 6;\nexport const CONTRACT_PROXY_TYPE_IDENTITY_JUDGEMENT = 7;\n\nexport const MAX_BLOCK_WEIGHT = 500_000_000_000;\n\n// This is the target fill perbill amount accounting for base extrinsic fee, i.e. 187,000,000\n// Defined as a runtime constant: \"TargetBlockFullness\"\nexport const TARGET_FILL_AMOUNT =\n  ((MAX_BLOCK_WEIGHT * 0.75 * 0.25 - EXTRINSIC_BASE_WEIGHT) / MAX_BLOCK_WEIGHT) * 1_000_000_000;\n\nexport const TARGET_FILL_PERMILL = 0.25 * 1_000_000; // Equivalent to 25%\nexport const WEIGHT_FEE = 50n * 1000n;\n\nexport const RUNTIME_CONSTANTS = {\n  MOONBASE: {\n    MIN_FEE_MULTIPLIER: \"100000000000000000\",\n    MAX_FEE_MULTIPLIER: \"100000000000000000000000\",\n    MIN_BASE_FEE_IN_WEI: \"125000000\",\n    MAX_BASE_FEE_IN_WEI: \"125000000000000\",\n  },\n  MOONRIVER: {\n    MIN_FEE_MULTIPLIER: \"1000000000000000000\",\n    MAX_FEE_MULTIPLIER: \"100000000000000000000000\",\n    MIN_BASE_FEE_IN_WEI: \"1250000000\",\n    MAX_BASE_FEE_IN_WEI: \"125000000000000\",\n  },\n  MOONBEAM: {\n    MIN_FEE_MULTIPLIER: \"1000000000000000000\",\n    MAX_FEE_MULTIPLIER: \"100000000000000000000000\",\n    MIN_BASE_FEE_IN_WEI: \"125000000000\",\n    MAX_BASE_FEE_IN_WEI: \"12500000000000000\",\n  },\n} as const;\n\nexport const DUMMY_REVERT_BYTECODE = \"0x60006000fd\";\n","import type { SubmittableExtrinsic } from \"@polkadot/api/types\";\nimport type { ISubmittableResult } from \"@polkadot/types/types\";\nimport type { KeyringPair } from \"@polkadot/keyring/types\";\nimport { alith } from \"../constants\";\n\nexport const signAndSend = async (\n  tx: SubmittableExtrinsic<\"promise\", ISubmittableResult>,\n  account: KeyringPair = alith,\n  nonce = -1\n) =>\n  new Promise((resolve) =>\n    tx.signAndSend(account, { nonce }, ({ status }) => {\n      if (status.isInBlock) {\n        process.stdout.write(\n          \"Extrinsic submitted and included in block, waiting for finalization...\"\n        );\n      }\n      if (status.isFinalized) {\n        process.stdout.write(\"✅\\n\");\n        resolve(true);\n      }\n    })\n  );\n","import \"@moonbeam-network/api-augment\";\nimport type { ApiPromise } from \"@polkadot/api\";\nimport WebSocket from \"ws\";\n\n//**************************\n// DEV\n//**************************\n\nexport async function jumpBlocksDev(polkadotJsApi: ApiPromise, blocks: number) {\n  let blockCount = blocks;\n\n  while (blockCount > 0) {\n    await polkadotJsApi.rpc.engine.createBlock(true, true);\n    blockCount--;\n  }\n}\n\nexport async function jumpRoundsDev(\n  polkadotJsApi: ApiPromise,\n  count: number\n): Promise<string | null> {\n  // Calculate the number of blocks to create via arithmetic\n  const round = (await polkadotJsApi.query.parachainStaking.round()).current\n    .addn(count.valueOf())\n    .toNumber();\n\n  return jumpToRoundDev(polkadotJsApi, round);\n}\n\nexport async function jumpToRoundDev(polkadotJsApi: ApiPromise, round: number) {\n  // Calculate the number of blocks to create via arithmetic\n  let lastBlockHash = \"\";\n  for (;;) {\n    const currentRound = (await polkadotJsApi.query.parachainStaking.round()).current.toNumber();\n\n    if (currentRound === round) {\n      return lastBlockHash;\n    }\n    if (currentRound > round) {\n      return null;\n    }\n\n    lastBlockHash = (await polkadotJsApi.rpc.engine.createBlock(true, true)).blockHash.toString();\n  }\n}\n\n//**************************\n// CHOPSTICKS\n//**************************\n\nasync function calculateBlocks(polkadotJsApi: ApiPromise, targetRound: number) {\n  const roundInfo = await polkadotJsApi.query.parachainStaking.round();\n\n  if (roundInfo.current.toNumber() >= targetRound) {\n    return 0;\n  }\n\n  const roundsToJump = targetRound - roundInfo.current.toNumber();\n  const heightToJump = roundInfo.first.toNumber() + roundsToJump * roundInfo.length.toNumber();\n  const currentBlock = (await polkadotJsApi.rpc.chain.getHeader()).number.toNumber();\n\n  return heightToJump - currentBlock;\n}\n\nexport async function jumpRoundsChopsticks(polkadotJsApi: ApiPromise, port: number, count: number) {\n  const round = (await polkadotJsApi.query.parachainStaking.round()).current\n    .addn(count.valueOf())\n    .toNumber();\n\n  return jumpToRoundChopsticks(polkadotJsApi, port, round);\n}\n\nexport async function jumpToRoundChopsticks(\n  polkadotJsApi: ApiPromise,\n  port: number,\n  round: number\n) {\n  const blockToJump = await calculateBlocks(polkadotJsApi, round);\n  return jumpBlocksChopsticks(port, blockToJump);\n}\n\nexport async function jumpBlocksChopsticks(port: number, blockCount: number) {\n  return await sendNewBlockCmd(port, blockCount);\n}\n\nconst sendNewBlockCmd = async (port: number, count = 1) => {\n  const websocketUrl = `ws://127.0.0.1:${port}`;\n  const socket = new WebSocket(websocketUrl);\n\n  const result: string = await new Promise((resolve) => {\n    socket.on(\"open\", () => {\n      socket.send(\n        JSON.stringify({\n          jsonrpc: \"2.0\",\n          id: 1,\n          method: \"dev_newBlock\",\n          params: [{ count }],\n        })\n      );\n    });\n\n    socket.on(\"message\", (chunk) => {\n      const data: { id: number; jsonrpc: string; result: string } = JSON.parse(chunk.toString());\n      resolve(data.result);\n      socket.close();\n    });\n  });\n\n  return result;\n};\n","import \"@moonbeam-network/api-augment\";\nimport type { ApiPromise } from \"@polkadot/api\";\nimport { mapExtrinsics } from \"./block\";\nimport type { Extrinsic } from \"@polkadot/types/interfaces\";\nimport { setupLogger as createTestLogger } from \"./logger\";\n\n// Re-export setupLogger from logger.ts for backward compatibility\nexport const setupLogger = createTestLogger;\n\nexport function log(...msg: any[]) {\n  if (process.argv?.[2] && process.argv[2] === \"--printlogs\") {\n    console.log(...msg);\n  }\n}\n\nexport const printTokens = (api: ApiPromise, tokens: bigint, decimals = 2, pad = 9) => {\n  if (!api.registry.chainDecimals[0]) {\n    throw new Error(\"Chain decimals not found for system token\");\n  }\n\n  return `${(\n    Math.ceil(Number(tokens / 10n ** BigInt(api.registry.chainDecimals[0] - decimals))) /\n    10 ** decimals\n  )\n    .toString()\n    .padStart(pad)} ${api.registry.chainTokens[0]}`;\n};\n\nexport const printEvents = async (api: ApiPromise, hash?: string) => {\n  const blockHash = hash || (await api.rpc.chain.getBlockHash()).toString();\n  const apiAt = await api.at(blockHash);\n  const { block } = await api.rpc.chain.getBlock(blockHash);\n  const allRecords = (await apiAt.query.system.events()) as any;\n\n  const txsWithEvents = mapExtrinsics(block.extrinsics as unknown as Extrinsic[], allRecords);\n\n  console.log(`===== Block #${block.header.number.toString()}: ${blockHash}`);\n  console.log(block.header.toHuman());\n  console.log(\n    txsWithEvents\n      .map(\n        ({ extrinsic, events }, i) =>\n          `  [${i}]: ${extrinsic.method.section.toString()}. ` +\n          `${extrinsic.method.method.toString()}\\n` +\n          `  - 0x${Buffer.from(extrinsic.data).toString(\"hex\")}\\n${events\n            .map(\n              (event) =>\n                `    * ${event.section.toString()}.${event.method.toString()}:\\n${event.data\n                  .map((datum) => `      - ${datum.toHex()}`)\n                  .join(\"\\n\")}`\n            )\n            .join(\"\\n\")}`\n      )\n      .join(\"\\n\")\n  );\n};\n","import \"@moonbeam-network/api-augment\";\nimport type { Web3 } from \"web3\";\nimport { alith } from \"../constants/accounts\";\nimport { MIN_GAS_PRICE } from \"../constants/chain\";\n\nexport async function customWeb3Request(web3: Web3, method: string, params: any[]) {\n  return new Promise((resolve, reject) => {\n    ((web3.eth as any).currentProvider as any).send(\n      {\n        jsonrpc: \"2.0\",\n        id: 1,\n        method,\n        params,\n      },\n      (error: Error | null, result?: any) => {\n        if (error) {\n          reject(\n            `Failed to send custom request (${method} (${params\n              .map((p) => {\n                const str = p.toString();\n                return str.length > 128 ? `${str.slice(0, 96)}...${str.slice(-28)}` : str;\n              })\n              .join(\",\")})): ${error.message || error.toString()}`\n          );\n        }\n        resolve(result);\n      }\n    );\n  });\n}\n\nexport interface Web3EthCallOptions {\n  from?: string | number;\n  to: string;\n  value?: number | string | bigint;\n  gas?: number | string;\n  gasPrice?: number | string | bigint;\n  maxPriorityFeePerGas?: number | string | bigint;\n  maxFeePerGas?: number | string | bigint;\n  data?: string;\n  nonce?: number;\n}\n\nexport async function web3EthCall(web3: Web3, options: Web3EthCallOptions) {\n  return await customWeb3Request(web3, \"eth_call\", [\n    {\n      from: options.from === undefined ? options.from : alith.address,\n      value: options.value,\n      gas: options.gas === undefined ? options.gas : 256000,\n      gasPrice: options.gas === undefined ? options.gas : `0x${MIN_GAS_PRICE}`,\n      to: options.to,\n      data: options.data,\n    },\n  ]);\n}\n\n// Extra type because web3 is not well typed\n// export interface Subscription<T> extends Web3Subscription<T> {\n//   once: (\n//     type: \"data\" | \"connected\",\n//     handler: (data: T) => void\n//   ) => Subscription<T>;\n// }\n\n// Little helper to hack web3 that are not complete.\n// export function web3Subscribe(\n//   web3: Web3,\n//   type: \"newBlockHeaders\"\n// ): Subscription<BlockHeader>;\n// export function web3Subscribe(\n//   web3: Web3,\n//   type: \"pendingTransactions\"\n// ): Subscription<string>;\n// export function web3Subscribe(\n//   web3: Web3,\n//   type: \"logs\",\n//   params: {}\n// ): Subscription<Log>;\n// export function web3Subscribe(\n//   web3: Web3,\n//   type: \"newBlockHeaders\" | \"pendingTransactions\" | \"logs\",\n//   params?: any\n// ) {\n//   return (web3.eth as any).subscribe(...[].slice.call(arguments, 1));\n// }\n\nexport type EnhancedWeb3 = Web3 & {\n  customRequest: (method: string, params: any[]) => Promise<any>;\n};\n","import type {\n  ContractDeploymentOptions,\n  DeepPartial,\n  DevModeContext,\n  GenericContext,\n  ViemTransactionOptions,\n} from \"@moonwall/types\";\nimport type { Abi } from \"viem\";\nimport {\n  type BlockTag,\n  type DeployContractParameters,\n  type TransactionSerializable,\n  createWalletClient,\n  hexToNumber,\n  http,\n} from \"viem\";\nimport { setTimeout as timer } from \"node:timers/promises\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport type { Chain } from \"viem/chains\";\nimport { ALITH_ADDRESS, ALITH_PRIVATE_KEY } from \"../constants/accounts\";\nimport { directRpcRequest } from \"./common\";\n\n/**\n * @name getDevChain\n * @description This function returns a development chain object for Moonbeam.\n * @param url - The WebSocket URL of the development chain.\n *\n * @returns Returns an object that represents the Moonbeam development chain.\n * The object includes properties such as the chain's ID, name, network, native currency, and RPC URLs.\n *\n * @property id - The ID of the development chain. For Moonbeam Dev, this is 1281.\n * @property name - The name of the development chain. For this function, it's \"Moonbeam Dev\".\n * @property network - The network name of the development chain. For this function, it's \"moonbeam\".\n * @property nativeCurrency - An object containing the native currency's details:\n *      - decimals: The number of decimal places the native currency supports.\n *      - name: The name of the native currency. For Moonbeam Dev, it's \"Glimmer\".\n *      - symbol: The symbol of the native currency. For Moonbeam Dev, it's \"GLMR\".\n * @property rpcUrls - An object that includes the RPC URLs for the chain:\n *      - public: The public HTTP URL(s) for the chain.\n *      - default: The default HTTP URL(s) for the chain.\n */\nexport async function getDevChain(url: string) {\n  const httpUrl = url.replace(\"ws\", \"http\");\n  const block = { http: [httpUrl] };\n\n  return {\n    id: 1281,\n    name: \"Moonbeam Dev\",\n    nativeCurrency: {\n      decimals: 18,\n      name: \"Glimmer\",\n      symbol: \"GLMR\",\n    },\n    rpcUrls: {\n      public: block,\n      default: block,\n    },\n  } as const satisfies Chain;\n}\n\n/**\n * Derives a Viem chain object from a given HTTP endpoint.\n *\n * @export\n * @param endpoint The endpoint for the JSON RPC requests.\n * @param maxRetries Maximum number of retry attempts (default: 3)\n * @returns A promise that resolves to an object satisfying the Chain interface, which includes\n * properties such as the chain id, chain name, network name, native currency information,\n * and RPC URLs.\n * @throws Will throw an error if the RPC request fails after all retries.\n * @example\n * const chain = await deriveViemChain('http://localhost:8545');\n */\nexport async function deriveViemChain(endpoint: string, maxRetries: number = 3) {\n  const httpEndpoint = endpoint.replace(\"ws\", \"http\");\n  const block = { http: [httpEndpoint] };\n\n  let lastError: Error | undefined;\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      const id = hexToNumber(await directRpcRequest(httpEndpoint, \"eth_chainId\", []));\n      const name = await directRpcRequest(httpEndpoint, \"system_chain\", []);\n      const { tokenSymbol, tokenDecimals } = await directRpcRequest(\n        httpEndpoint,\n        \"system_properties\",\n        []\n      );\n\n      return {\n        id,\n        name,\n        nativeCurrency: {\n          decimals: tokenDecimals,\n          name: tokenSymbol,\n          symbol: tokenSymbol,\n        },\n        rpcUrls: {\n          public: block,\n          default: block,\n        },\n      } as const satisfies Chain;\n    } catch (error: any) {\n      lastError = error;\n      if (attempt < maxRetries) {\n        console.warn(\n          `Failed to derive viem chain on attempt ${attempt}/${maxRetries}: ${error.message}. Retrying...`\n        );\n        await timer(1000 * attempt); // Linear backoff\n      }\n    }\n  }\n\n  throw new Error(\n    `Failed to derive viem chain after ${maxRetries} attempts: ${lastError?.message || \"Unknown error\"}`\n  );\n}\n\n/**\n * @name deployViemContract\n * @description This function deploys a contract to the Moonbeam development chain.\n * @param context - The DevModeContext object.\n * @param abi - The Application Binary Interface (ABI) of the contract.\n * @param bytecode - The compiled bytecode of the contract.\n * @param privateKey - The private key used for the deployment transaction (defaults to ALITH_PRIVATE_KEY).\n *\n * @returns Returns an object containing the deployed contract's address, the transaction status, and any logs.\n *\n * @throws This function will throw an error if the contract deployment fails.\n *\n * @async This function returns a Promise that resolves when the contract has been successfully deployed.\n *\n * @property contractAddress - The address of the deployed contract.\n * @property status - The status of the contract deployment transaction.\n * @property logs - Any logs produced during the contract deployment transaction.\n */\nexport async function deployViemContract<TOptions extends ContractDeploymentOptions>(\n  // TODO: Make this generic\n  context: DevModeContext,\n  abi: Abi,\n  bytecode: `0x${string}`,\n  options?: TOptions\n) {\n  // Enable when Viem allows it\n  // const isLegacy = options?.txnType === \"legacy\" || options?.txnType === undefined;\n  // const isEIP1559 = options?.txnType === \"eip1559\";\n  // const isEIP2930 = options?.txnType === \"eip2930\";\n  // const url = context.viem().transport.url;\n  const url = context.viem().transport.url;\n\n  const { privateKey = ALITH_PRIVATE_KEY, ...rest } = options || ({} as any);\n  const blob = {\n    ...rest,\n    abi,\n    bytecode,\n    account: privateKeyToAccount(privateKey),\n  };\n\n  const account = privateKeyToAccount(ALITH_PRIVATE_KEY);\n  const client = createWalletClient({\n    transport: http(url),\n    account,\n    chain: await deriveViemChain(url),\n  });\n\n  // Enable when Viem allows it\n  // switch (true) {\n  //   case isLegacy:\n  //     blob[\"gasPrice\"] = options?.gasPrice || 10_000_000_000n;\n  //     blob[\"gas\"] = options?.gasLimit || 22318;\n  //     break;\n  //   case isEIP1559:\n  //     blob[\"accessList\"] = options?.accessList || [];\n  //     blob[\"maxFeePerGas\"] = options?.maxFeePerGas || 10_000_000_000n;\n  //     blob[\"maxPriorityFeePerGas\"] = options?.maxPriorityFeePerGas || 0n;\n  //     blob[\"gasLimit\"] = options?.gasLimit || 22318;\n  //     break;\n  //   case isEIP2930:\n  //     blob[\"gasPrice\"] = options?.gasPrice || 10_000_000_000n;\n  //     blob[\"gasLimit\"] = options?.gasLimit || 22318n;\n  //     blob[\"accessList\"] = options?.accessList || [];\n  //     break;\n  //   default:\n  //     throw new Error(\"Invalid transaction type, undpate deployViemContract function\");\n  // }\n\n  const hash = await client.deployContract(blob as DeployContractParameters);\n\n  await context.createBlock();\n\n  for (let i = 0; i < 5; i++) {\n    try {\n      const { contractAddress, status, logs } = await context\n        .viem()\n        .getTransactionReceipt({ hash });\n      return { contractAddress, status, logs, hash };\n    } catch (e: any) {\n      console.log(e.message);\n      console.log(\"Contract deployment query, retrying...\");\n      await timer(100);\n    }\n  }\n  throw new Error(\"Contract deployment query failed after 5 retries\");\n}\n\nexport type InputAmountFormats = number | bigint | string | `0x${string}`;\n\nexport type TransferOptions =\n  | (Omit<TransactionSerializable, \"to\" | \"value\"> & {\n      privateKey?: `0x${string}`;\n    })\n  | undefined;\n\n/**\n * createRawTransfer function creates and signs a transfer, as a hex string, that can be submitted to the network via public client.\"\n *\n * @export\n * @template TOptions - Optional parameters of Viem's TransferOptions\n * @param {DevModeContext} context - the DevModeContext instance\n * @param {`0x${string}`} to - the destination address of the transfer\n * @param {InputAmountFormats} value - the amount to transfer. It accepts different formats including number, bigint, string or hexadecimal strings\n * @param {TOptions} [options] - (optional) additional transaction options\n * @returns {Promise<`0x${string}`>} - the signed raw transaction in hexadecimal string format\n */\nexport async function createRawTransfer<TOptions extends TransferOptions>(\n  context: DevModeContext,\n  to: `0x${string}`,\n  value: InputAmountFormats,\n  options?: TOptions\n): Promise<`0x${string}`> {\n  const transferAmount = typeof value === \"bigint\" ? value : BigInt(value);\n  return await createViemTransaction(context, {\n    ...options,\n    to: to as any,\n    value: transferAmount,\n  });\n}\n\n/**\n * createViemTransaction function creates and signs a raw transaction, as a hex string, that can be submitted to the network via public client.\"\n *\n * @export\n * @template TOptions - Optional parameters of Viem's TransactionOptions\n * @param {GenericContext} context - the GenericContext instance\n * @param {TOptions} options - transaction options including type, privateKey, value, to, chainId, gasPrice, estimatedGas, accessList, data\n * @returns {Promise<string>} - the signed raw transaction in hexadecimal string format\n */\nexport async function createViemTransaction<TOptions extends DeepPartial<ViemTransactionOptions>>(\n  context: GenericContext,\n  options: TOptions\n): Promise<`0x${string}`> {\n  const type = !!options && !!options.txnType ? options.txnType : \"eip1559\";\n  const privateKey = !!options && !!options.privateKey ? options.privateKey : ALITH_PRIVATE_KEY;\n  const account = privateKeyToAccount(privateKey);\n  const value = options?.value ? options.value : 0n;\n  const to = options?.to ? options.to : \"0x0000000000000000000000000000000000000000\";\n  const chainId = await context.viem().getChainId();\n  const txnCount = await context.viem().getTransactionCount({ address: account.address });\n  const gasPrice = await context.viem().getGasPrice();\n  const data = options?.data ? options.data : \"0x\";\n\n  const estimatedGas =\n    options.skipEstimation || options.gas !== undefined\n      ? 1_500_000n\n      : await context.viem().estimateGas({ account: account.address, to, value, data });\n  const accessList = options?.accessList ? options.accessList : [];\n\n  const txnBlob =\n    type === \"eip1559\"\n      ? ({\n          to,\n          value,\n          maxFeePerGas: options.maxFeePerGas !== undefined ? options.maxFeePerGas : gasPrice,\n          maxPriorityFeePerGas:\n            options.maxPriorityFeePerGas !== undefined ? options.maxPriorityFeePerGas : gasPrice,\n          gas: options.gas !== undefined ? options.gas : estimatedGas,\n          nonce: options.nonce !== undefined ? options.nonce : txnCount,\n          data,\n          chainId,\n          type,\n        } satisfies TransactionSerializable)\n      : type === \"legacy\"\n        ? ({\n            to,\n            value,\n            gasPrice: options.gasPrice !== undefined ? options.gasPrice : gasPrice,\n            gas: options.gas !== undefined ? options.gas : estimatedGas,\n            nonce: options.nonce !== undefined ? options.nonce : txnCount,\n            data,\n          } satisfies TransactionSerializable)\n        : type === \"eip2930\"\n          ? ({\n              to,\n              value,\n              gasPrice: options.gasPrice !== undefined ? options.gasPrice : gasPrice,\n              gas: options.gas !== undefined ? options.gas : estimatedGas,\n              nonce: options.nonce !== undefined ? options.nonce : txnCount,\n              data,\n              chainId,\n              type,\n            } satisfies TransactionSerializable)\n          : {};\n\n  if (\n    (type === \"eip1559\" && accessList.length > 0) ||\n    (type === \"eip2930\" && accessList.length > 0)\n  ) {\n    (txnBlob as any).accessList = accessList;\n  }\n  return await account.signTransaction(txnBlob);\n}\n\n/**\n * checkBalance function checks the balance of a given account.\n *\n * @export\n * @param {DevModeContext} context - the DevModeContext instance\n * @param {`0x${string}`} [account=ALITH_ADDRESS] - the account address whose balance is to be checked. If no account is provided, it defaults to ALITH_ADDRESS\n * @returns {Promise<bigint>} - returns a Promise that resolves to the account's balance as a BigInt\n */\nexport async function checkBalance(\n  context: DevModeContext,\n  account: `0x${string}` = ALITH_ADDRESS,\n  block: BlockTag | bigint = \"latest\"\n): Promise<bigint> {\n  return typeof block === \"string\"\n    ? await context.viem().getBalance({ address: account, blockTag: block })\n    : typeof block === \"bigint\"\n      ? await context.viem().getBalance({ address: account, blockNumber: block })\n      : await context.viem().getBalance({ address: account });\n}\n\n/**\n * Sends a raw signed transaction on to RPC node for execution.\n *\n * @async\n * @function\n * @param {GenericContext} context - The DevModeContext for the Ethereum client interaction.\n * @param {`0x${string}`} rawTx - The signed and serialized hexadecimal transaction string.\n * @returns {Promise<any>} A Promise resolving when the transaction is sent or rejecting with an error.\n */\nexport async function sendRawTransaction(\n  context: GenericContext,\n  rawTx: `0x${string}`\n): Promise<`0x${string}`> {\n  return await context.viem().request({ method: \"eth_sendRawTransaction\", params: [rawTx] });\n}\n"],"mappings":"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","names":["logger","setupLogger"]}