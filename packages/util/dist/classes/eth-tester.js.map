{"version":3,"sources":["../../src/classes/eth-tester.ts"],"sourcesContent":["import type { Web3 } from \"web3\";\nimport { type AccessListish, ContractFactory } from \"ethers\";\nimport type { Logger } from \"pino\";\n\n/**\n * @name TransactionOptions\n * @description Ethereum Transaction options\n * @param from: From address\n * @param to: To address\n * @param privateKey: Private key of the account to sign the transaction\n * @param nonce: Nonce of the transaction\n * @param gas: Gas limit of the transaction\n * @param gasPrice: Gas price of the transaction\n * @param maxFeePerGas: Max fee per gas of the transaction\n * @param maxPriorityFeePerGas: Max priority fee per gas of the transaction\n * @param value: Value of the transaction\n * @param data: Data of the transaction\n * @param accessList: Access list of the transaction\n */\nexport interface TransactionOptions {\n  from?: string;\n  to?: string;\n  privateKey?: string;\n  nonce?: number | bigint;\n  gas?: string | number | bigint;\n  gasPrice?: string | number | bigint;\n  maxFeePerGas?: string | number | bigint;\n  maxPriorityFeePerGas?: string | number | bigint;\n  value?: string | number;\n  data?: string;\n  accessList?: AccessListish;\n}\n\nexport const DEFAULT_TRANSACTION = {};\n\n/**\n * @name ContractCreation\n * @description Contract creation options\n * @param byteCode: Bytecode of the contract\n * @param abi: ABI of the contract\n * @param arguments: Arguments of the contract\n */\nexport interface ContractCreation {\n  byteCode: string;\n  abi: any;\n  arguments?: any[];\n}\n\n/**\n * @name EthTester\n * @description Class to generate Ethereum transactions for testing purposes\n */\nexport class EthTester {\n  /**\n   * @name defaultType: Default type of Ethereum transaction\n   */\n  private defaultType: \"Legacy\" | \"EIP2930\" | \"EIP1559\";\n\n  /**\n   * @name defaultType: Default account to sign Ethereum transactions (usually sudo account)\n   */\n  private defaultAccount: ReturnType<Web3[\"eth\"][\"accounts\"][\"privateKeyToAccount\"]>;\n\n  /**\n   * @name logger: Logger to use\n   */\n  private logger: Logger;\n\n  /**\n   * @name web3: Web3 instance\n   */\n  public web3: Web3;\n\n  /**\n   * @name constructor\n   * @param web3: Web3 instance\n   * @param privateKey: Private key of the default account\n   * @param logger: Logger to use\n   * @param type: Default type of Ethereum transaction\n   * @returns Web3Tester instance\n   * @description Creates a new Web3Tester instance\n   * @example\n   * const web3 = new Web3(\"http://localhost:9944\");\n   * const web3Tester = new Web3Tester(web3, alith.privateKey, logger, \"EIP1559\");\n   * const rawTransaction = await web3Tester.genSignedTransfer({\n   *  to: baltathar.address,\n   *  value: web3.utils.toWei(\"1\", \"ether\"),\n   * });\n   */\n  constructor(\n    web3: Web3,\n    privateKey: string,\n    logger: Logger,\n    type: \"Legacy\" | \"EIP2930\" | \"EIP1559\" = \"Legacy\"\n  ) {\n    this.web3 = web3;\n    this.logger = logger;\n    this.defaultType = type;\n    this.defaultAccount = web3.eth.accounts.privateKeyToAccount(privateKey);\n  }\n\n  /**\n   * @name genSignedTransaction\n   * @param options: Transaction options\n   * @param txType: Type of Ethereum transaction\n   * @returns Signed transaction\n   * @description Generates a signed Ethereum transaction\n   * @example\n   * const rawTransaction = await web3Tester.genSignedTransaction({\n   *   to: baltathar.address,\n   *   to: authorMapping.address,\n   *   data: authorMapping.encodeFunctionData(\"setKeys\", [keys]),\n   * });\n   */\n  genSignedTransaction = async (\n    options: TransactionOptions = DEFAULT_TRANSACTION,\n    txType?: \"Legacy\" | \"EIP2930\" | \"EIP1559\"\n  ): Promise<string> => {\n    const type = txType || this.defaultType;\n    const isLegacy = type === \"Legacy\";\n    const isEip2930 = type === \"EIP2930\";\n    const isEip1559 = type === \"EIP1559\";\n\n    // Checks transaction shouldn't have both Legacy and EIP1559 fields\n    if (options.gasPrice && options.maxFeePerGas) {\n      throw new Error(\"txn has both gasPrice and maxFeePerGas!\");\n    }\n    if (options.gasPrice && options.maxPriorityFeePerGas) {\n      throw new Error(\"txn has both gasPrice and maxPriorityFeePerGas!\");\n    }\n\n    // Converts BigInt to hex string. This is needed because Web3 doesn't support BigInt\n    if (typeof options.gasPrice === \"bigint\") {\n      options.gasPrice = `0x${options.gasPrice.toString(16)}`;\n    }\n    if (typeof options.maxFeePerGas === \"bigint\") {\n      options.maxFeePerGas = `0x${options.maxFeePerGas.toString(16)}`;\n    }\n    if (typeof options.maxPriorityFeePerGas === \"bigint\") {\n      options.maxPriorityFeePerGas = `0x${options.maxPriorityFeePerGas.toString(16)}`;\n    }\n\n    let maxFeePerGas: any;\n    let maxPriorityFeePerGas: any;\n\n    if (options.gasPrice) {\n      maxFeePerGas = options.gasPrice;\n      maxPriorityFeePerGas = options.gasPrice;\n    } else {\n      maxFeePerGas = options.maxFeePerGas || BigInt(await (this.web3 as any).eth.getGasPrice());\n      maxPriorityFeePerGas = options.maxPriorityFeePerGas || 0;\n    }\n\n    // Sets default values\n    const gasPrice =\n      options.gasPrice !== undefined\n        ? options.gasPrice\n        : `0x${BigInt(await (this.web3 as any).eth.getGasPrice()).toString(16)}`;\n    const value = options.value !== undefined ? options.value : \"0x00\";\n    const from = options.from || this.defaultAccount.address;\n    const privateKey =\n      options.privateKey !== undefined ? options.privateKey : this.defaultAccount.privateKey;\n\n    // Always execute estimateGas. Allows to retrieve potential errors\n    let error: any;\n    const estimatedGas = await (this.web3 as any).eth\n      .estimateGas({\n        from: from,\n        to: options.to,\n        data: options.data,\n      })\n      .catch((e: any) => {\n        error = e;\n        return 0;\n      });\n\n    // Instead of hardcoding the gas limit, we estimate the gas\n    const gas = options.gas || estimatedGas;\n\n    const accessList = options.accessList || [];\n    const nonce =\n      options.nonce != null\n        ? options.nonce\n        : await (this.web3 as any).eth.getTransactionCount(from, \"pending\");\n\n    let data: any;\n    let rawTransaction: string;\n    if (isLegacy) {\n      data = {\n        from,\n        to: options.to,\n        value: value?.toString(),\n        gasPrice,\n        gas,\n        nonce: nonce,\n        data: options.data,\n      };\n      const tx = await (this.web3 as any).eth.accounts.signTransaction(data, privateKey);\n      rawTransaction = tx.rawTransaction;\n    } else {\n      const chainId = await (this.web3 as any).eth.getChainId();\n      if (isEip2930) {\n        data = {\n          from,\n          to: options.to,\n          value: value?.toString(),\n          gasPrice,\n          gasLimit: gas,\n          nonce: nonce,\n          data: options.data,\n          accessList,\n          chainId,\n          type: 1,\n        };\n      } else if (isEip1559) {\n        data = {\n          from,\n          to: options.to,\n          value: value?.toString(),\n          maxFeePerGas,\n          maxPriorityFeePerGas,\n          gasLimit: gas,\n          nonce: nonce,\n          data: options.data,\n          accessList,\n          chainId,\n          type: 2,\n        };\n      }\n      const tx = await (this.web3 as any).eth.accounts.signTransaction(data, privateKey);\n      rawTransaction = tx.rawTransaction;\n    }\n\n    this.logger.debug(\n      `Tx [${\n        /:([0-9]+)$/.exec(((this.web3 as any).currentProvider as any).host)?.[1]\n      }] from: ${`${data.from.substr(0, 5)}...${data.from.substr(data.from.length - 3)}`}, ${\n        data.to ? `to: ${`${data.to.substr(0, 5)}...${data.to.substr(data.to.length - 3)}`}, ` : \"\"\n      }${data.value ? `value: ${data.value.toString()}, ` : \"\"}${\n        data.gasPrice ? `gasPrice: ${data.gasPrice.toString()}, ` : \"\"\n      }${data.maxFeePerGas ? `maxFeePerGas: ${data.maxFeePerGas.toString()}, ` : \"\"}${\n        data.maxPriorityFeePerGas\n          ? `maxPriorityFeePerGas: ${data.maxPriorityFeePerGas.toString()}, `\n          : \"\"\n      }${data.accessList ? `accessList: ${data.accessList.toString()}, ` : \"\"}${\n        data.gas ? `gas: ${data.gas.toString()}, ` : \"\"\n      }${data.nonce ? `nonce: ${data.nonce.toString()}, ` : \"\"}${\n        !data.data\n          ? \"\"\n          : `data: ${\n              data.data.length < 50\n                ? data.data\n                : `${data.data.substr(0, 5)}...${data.data.substr(data.data.length - 3)}`\n            }, `\n      }${error ? `ERROR: ${error.toString()}, ` : \"\"}`\n    );\n    return rawTransaction;\n  };\n\n  /**\n   * @name genSignedTransfer\n   * @param to Address of the recipient\n   * @param value Amount of Wei to send\n   * @param options Transaction options\n   * @description Generates a signed Ethereum transactiosn\n   * @returns Signed transaction\n   */\n  genSignedTransfer = async (\n    to: string,\n    value: number | string | bigint,\n    options: TransactionOptions = DEFAULT_TRANSACTION\n  ): Promise<string> => {\n    return await this.genSignedTransaction({\n      ...options,\n      value: value.toString(),\n      to,\n    });\n  };\n\n  /**\n   * @name genSignedContractDeployment\n   * @description Generates a signed contract deployment transaction\n   * @param contractCreation Contract creation object\n   * @param options Transaction options\n   * @returns Signed transaction\n   */\n  genSignedContractDeployment = async (\n    contractCreation: ContractCreation,\n    options: TransactionOptions = DEFAULT_TRANSACTION\n  ): Promise<string> => {\n    const factory = new ContractFactory(contractCreation.abi, contractCreation.byteCode);\n    return await this.genSignedTransaction({\n      ...options,\n      data: (await factory.getDeployTransaction(...(contractCreation.arguments || []))).data,\n    });\n  };\n\n  /**\n   * @name sendSignedTransaction\n   * @description Sends a signed transaction, without waiting for it to be produced.\n   * @param rawTransaction Signed transaction\n   * @returns Transaction JSON RPC response\n   */\n  sendSignedTransaction = async (rawTransaction: string | PromiseLike<string>): Promise<any> => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (typeof (this.web3 as any).currentProvider === \"string\") {\n          reject(\"Web3 provider is not a valid provider\");\n          return;\n        }\n        ((this.web3 as any).currentProvider as any).send(\n          {\n            jsonrpc: \"2.0\",\n            id: 1,\n            method: \"eth_sendRawTransaction\",\n            params: [await rawTransaction],\n          },\n          (error, result) => {\n            if (error) {\n              reject(`Failed to send signed transaction: ${error.message || error.toString()}`);\n            }\n            resolve(result);\n          }\n        );\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n}\n"],"mappings":"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","names":[]}