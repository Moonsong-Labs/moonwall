{"version":3,"sources":["../../src/functions/providers.ts","../../src/constants/accounts.ts","../../src/constants/chain.ts"],"sourcesContent":["import \"@moonbeam-network/api-augment\";\nimport type { Web3 } from \"web3\";\nimport { alith } from \"../constants/accounts\";\nimport { MIN_GAS_PRICE } from \"../constants/chain\";\n\nexport async function customWeb3Request(web3: Web3, method: string, params: any[]) {\n  return new Promise((resolve, reject) => {\n    ((web3.eth as any).currentProvider as any).send(\n      {\n        jsonrpc: \"2.0\",\n        id: 1,\n        method,\n        params,\n      },\n      (error: Error | null, result?: any) => {\n        if (error) {\n          reject(\n            `Failed to send custom request (${method} (${params\n              .map((p) => {\n                const str = p.toString();\n                return str.length > 128 ? `${str.slice(0, 96)}...${str.slice(-28)}` : str;\n              })\n              .join(\",\")})): ${error.message || error.toString()}`\n          );\n        }\n        resolve(result);\n      }\n    );\n  });\n}\n\nexport interface Web3EthCallOptions {\n  from?: string | number;\n  to: string;\n  value?: number | string | bigint;\n  gas?: number | string;\n  gasPrice?: number | string | bigint;\n  maxPriorityFeePerGas?: number | string | bigint;\n  maxFeePerGas?: number | string | bigint;\n  data?: string;\n  nonce?: number;\n}\n\nexport async function web3EthCall(web3: Web3, options: Web3EthCallOptions) {\n  return await customWeb3Request(web3, \"eth_call\", [\n    {\n      from: options.from === undefined ? options.from : alith.address,\n      value: options.value,\n      gas: options.gas === undefined ? options.gas : 256000,\n      gasPrice: options.gas === undefined ? options.gas : `0x${MIN_GAS_PRICE}`,\n      to: options.to,\n      data: options.data,\n    },\n  ]);\n}\n\n// Extra type because web3 is not well typed\n// export interface Subscription<T> extends Web3Subscription<T> {\n//   once: (\n//     type: \"data\" | \"connected\",\n//     handler: (data: T) => void\n//   ) => Subscription<T>;\n// }\n\n// Little helper to hack web3 that are not complete.\n// export function web3Subscribe(\n//   web3: Web3,\n//   type: \"newBlockHeaders\"\n// ): Subscription<BlockHeader>;\n// export function web3Subscribe(\n//   web3: Web3,\n//   type: \"pendingTransactions\"\n// ): Subscription<string>;\n// export function web3Subscribe(\n//   web3: Web3,\n//   type: \"logs\",\n//   params: {}\n// ): Subscription<Log>;\n// export function web3Subscribe(\n//   web3: Web3,\n//   type: \"newBlockHeaders\" | \"pendingTransactions\" | \"logs\",\n//   params?: any\n// ) {\n//   return (web3.eth as any).subscribe(...[].slice.call(arguments, 1));\n// }\n\nexport type EnhancedWeb3 = Web3 & {\n  customRequest: (method: string, params: any[]) => Promise<any>;\n};\n","import \"@moonbeam-network/api-augment\";\nimport { Keyring } from \"@polkadot/api\";\nimport { DEFAULT_GENESIS_BALANCE, DEFAULT_GENESIS_MAPPING, DEFAULT_GENESIS_STAKING } from \"./chain\";\nimport type { KeyringPair } from \"@polkadot/keyring/types\";\n\nconst keyringEth = new Keyring({ type: \"ethereum\" });\nconst keyringEd25519 = new Keyring({ type: \"ed25519\" });\nconst keyringSr25519 = new Keyring({ type: \"sr25519\" });\n\n// Prefunded accounts.\nexport const ALITH_ADDRESS: `0x${string}` = \"0xf24FF3a9CF04c71Dbc94D0b566f7A27B94566cac\";\nexport const ALITH_PRIVATE_KEY: `0x${string}` =\n  \"0x5fb92d6e98884f76de468fa3f6278f8807c48bebc13595d45af5bdc4da702133\";\nexport const ALITH_SESSION_ADDRESS: `0x${string}` =\n  \"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\";\nexport const ALITH_CONTRACT_ADDRESSES: `0x${string}`[] = [\n  \"0xc01Ee7f10EA4aF4673cFff62710E1D7792aBa8f3\",\n  \"0x970951a12F975E6762482ACA81E57D5A2A4e73F4\",\n  \"0x3ed62137c5DB927cb137c26455969116BF0c23Cb\",\n  \"0x962c0940d72E7Db6c9a5F81f1cA87D8DB2B82A23\",\n  \"0x5CC307268a1393AB9A764A20DACE848AB8275c46\",\n  \"0xeAB4eEBa1FF8504c124D031F6844AD98d07C318f\",\n];\n\nexport const BALTATHAR_ADDRESS: `0x${string}` = \"0x3Cd0A705a2DC65e5b1E1205896BaA2be8A07c6e0\";\nexport const BALTATHAR_PRIVATE_KEY: `0x${string}` =\n  \"0x8075991ce870b93a8870eca0c0f91913d12f47948ca0fd25b49c6fa7cdbeee8b\";\nexport const BALTATHAR_SESSION_ADDRESS: `0x${string}` =\n  \"0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48\";\n\nexport const CHARLETH_ADDRESS: `0x${string}` = \"0x798d4Ba9baf0064Ec19eB4F0a1a45785ae9D6DFc\";\nexport const CHARLETH_PRIVATE_KEY: `0x${string}` =\n  \"0x0b6e18cafb6ed99687ec547bd28139cafdd2bffe70e6b688025de6b445aa5c5b\";\nexport const CHARLETH_SESSION_ADDRESS: `0x${string}` =\n  \"0x90b5ab205c6974c9ea841be688864633dc9ca8a357843eeacf2314649965fe22\";\n\nexport const DOROTHY_ADDRESS: `0x${string}` = \"0x773539d4Ac0e786233D90A233654ccEE26a613D9\";\nexport const DOROTHY_PRIVATE_KEY: `0x${string}` =\n  \"0x39539ab1876910bbf3a223d84a29e28f1cb4e2e456503e7e91ed39b2e7223d68\";\n\nexport const ETHAN_ADDRESS: `0x${string}` = \"0xFf64d3F6efE2317EE2807d223a0Bdc4c0c49dfDB\";\nexport const ETHAN_PRIVATE_KEY: `0x${string}` =\n  \"0x7dce9bc8babb68fec1409be38c8e1a52650206a7ed90ff956ae8a6d15eeaaef4\";\n\nexport const FAITH_ADDRESS: `0x${string}` = \"0xC0F0f4ab324C46e55D02D0033343B4Be8A55532d\";\nexport const FAITH_PRIVATE_KEY: `0x${string}` =\n  \"0xb9d2ea9a615f3165812e8d44de0d24da9bbd164b65c4f0573e1ce2c8dbd9c8df\";\n\nexport const GOLIATH_ADDRESS: `0x${string}` = \"0x7BF369283338E12C90514468aa3868A551AB2929\";\nexport const GOLIATH_PRIVATE_KEY: `0x${string}` =\n  \"0x96b8a38e12e1a31dee1eab2fffdf9d9990045f5b37e44d8cc27766ef294acf18\";\n\n// Deprecated\nexport const GERALD_ADDRESS: `0x${string}` = \"0x6Be02d1d3665660d22FF9624b7BE0551ee1Ac91b\";\nexport const GERALD_PRIVATE_KEY: `0x${string}` =\n  \"0x99B3C12287537E38C90A9219D4CB074A89A16E9CDB20BF85728EBD97C343E342\";\nexport const GERALD_CONTRACT_ADDRESSES: `0x${string}`[] = [\n  \"0xC2Bf5F29a4384b1aB0C063e1c666f02121B6084a\",\n  \"0x5c4242beB94dE30b922f57241f1D02f36e906915\",\n  \"0x42e2EE7Ba8975c473157634Ac2AF4098190fc741\",\n  \"0xF8cef78E923919054037a1D03662bBD884fF4edf\",\n  \"0xe573BCA813c741229ffB2488F7856C6cAa841041\",\n  \"0xBb0CC0fb3e0c06725c67167501f850B4900D6DB5\",\n];\n\n// This is Alice0x6Be02d1d3665660d22FF9624b7BE0551ee1Ac91b\nexport const ALITH_GENESIS_FREE_BALANCE = DEFAULT_GENESIS_BALANCE - DEFAULT_GENESIS_MAPPING;\nexport const ALITH_GENESIS_LOCK_BALANCE = DEFAULT_GENESIS_STAKING;\nexport const ALITH_GENESIS_RESERVE_BALANCE = DEFAULT_GENESIS_MAPPING;\nexport const ALITH_GENESIS_TRANSFERABLE_BALANCE =\n  ALITH_GENESIS_FREE_BALANCE - ALITH_GENESIS_LOCK_BALANCE;\n\nexport const alith: KeyringPair = keyringEth.addFromUri(ALITH_PRIVATE_KEY);\nexport const baltathar: KeyringPair = keyringEth.addFromUri(BALTATHAR_PRIVATE_KEY);\nexport const charleth: KeyringPair = keyringEth.addFromUri(CHARLETH_PRIVATE_KEY);\nexport const dorothy: KeyringPair = keyringEth.addFromUri(DOROTHY_PRIVATE_KEY);\nexport const ethan: KeyringPair = keyringEth.addFromUri(ETHAN_PRIVATE_KEY);\nexport const faith: KeyringPair = keyringEth.addFromUri(FAITH_PRIVATE_KEY);\nexport const goliath: KeyringPair = keyringEth.addFromUri(GOLIATH_PRIVATE_KEY);\n\n// deprecated\nexport const gerald: KeyringPair = keyringEth.addFromUri(GERALD_PRIVATE_KEY);\n\nlet accountSeed = 10000;\nexport function generateKeyringPair(\n  type: \"ethereum\" | \"sr25519\" | \"ed25519\" = \"ethereum\",\n  privateKey?: string\n): KeyringPair {\n  const key = privateKey || `0xDEADBEEF${(accountSeed++).toString(16).padStart(56, \"0\")}`;\n  if (type === \"sr25519\") {\n    return keyringSr25519.addFromUri(key);\n  }\n  if (type === \"ed25519\") {\n    return keyringEd25519.addFromUri(key);\n  }\n  return keyringEth.addFromUri(key);\n}\n","import \"@moonbeam-network/api-augment\";\nexport const SPECS_PATH = \"./moonbeam-test-specs\";\n\nexport const DEBUG_MODE = process.env.DEBUG_MODE || false;\nexport const DISPLAY_LOG = process.env.MOONBEAM_LOG || false;\nexport const MOONBEAM_LOG = process.env.MOONBEAM_LOG || \"info\";\n\nexport const BASE_PATH = process.env.BASE_PATH;\nexport const CUSTOM_SPEC_PATH = process.env.CUSTOM_SPEC_PATH;\nexport const BINARY_PATH = process.env.BINARY_PATH || \"../target/release/moonbeam\";\nexport const RELAY_BINARY_PATH = process.env.RELAY_BINARY_PATH || \"../target/release/polkadot\";\nexport const RELAY_LOG = process.env.RELAY_LOG;\n\n// Is undefined by default as the path is dependent of the runtime.\nexport const OVERRIDE_RUNTIME_PATH = process.env.OVERRIDE_RUNTIME_PATH || undefined;\nexport const SPAWNING_TIME = 20000;\nexport const ETHAPI_CMD = process.env.ETHAPI_CMD || \"\";\nexport const WASM_RUNTIME_OVERRIDES = process.env.WASM_RUNTIME_OVERRIDES || \"\";\n\nexport const RELAY_CHAIN_NODE_NAMES = [\"Alice\", \"Bob\", \"Charlie\", \"Dave\", \"Eve\", \"Ferdie\", \"One\"];\n\n// Test variables\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nexport const TREASURY_ACCOUNT = \"0x6d6f646c70632f74727372790000000000000000\";\nexport const GLMR = 1_000_000_000_000_000_000n;\nexport const MILLIGLMR = 1_000_000_000_000_000n;\nexport const MICROGLMR = 1_000_000_000_000n;\nexport const DEFAULT_GENESIS_BALANCE = 2n ** 80n;\nexport const DEFAULT_GENESIS_STAKING = 1_000n * GLMR;\nexport const DEFAULT_GENESIS_MAPPING = 100n * GLMR;\nexport const PROPOSAL_AMOUNT = 1000n * GLMR;\nexport const VOTE_AMOUNT = 10n * GLMR;\nexport const MIN_GLMR_STAKING = 1000n * GLMR;\nexport const MIN_GLMR_DELEGATOR = 1n * GLMR;\n\n// Weight correspond to 1 picosecond\nexport const WEIGHT_PER_SECOND = 1_000_000_000_000n;\n\n// Current gas per second\nexport const GAS_PER_SECOND = 40_000_000n;\nexport const GAS_PER_WEIGHT = WEIGHT_PER_SECOND / GAS_PER_SECOND;\n\n// Maximum Gas to PoV ratio used in the gasometer\nexport const GAS_PER_POV_BYTES = 4n;\n\n// Our weight limit is 500ms.\nexport const BLOCK_WEIGHT_LIMIT = WEIGHT_PER_SECOND / 2n;\n\n// Block limit is 20M gas but only 75% is used for normal transactions, limiting to 15M Gas\nexport const BLOCK_GAS_LIMIT = BLOCK_WEIGHT_LIMIT / GAS_PER_WEIGHT;\n\n// Maximum extrinsic weight is taken from the max allowed transaction weight per block (75%),\n// minus the block initialization (10%) and minus the extrinsic base cost.\nexport const EXTRINSIC_GAS_LIMIT = (BLOCK_GAS_LIMIT * 3n) / 4n - BLOCK_GAS_LIMIT / 10n;\n\n// Maximum PoV size in bytes allowed for a manual sealing dev block by substrate.\nexport const MAX_BLOCK_DEV_POV = 4 * 1024 * 1024 + 512;\n\n// Maximum PoV size in bytes allowed by the gasometer for one ethereum transaction\nexport const MAX_ETH_POV_PER_TX = EXTRINSIC_GAS_LIMIT / GAS_PER_POV_BYTES;\n\nexport const EXTRINSIC_BASE_WEIGHT = 250_000_000;\n\n// Weight per gas mapping\nexport const WEIGHT_PER_GAS = 1_000_000_000_000n / 40_000_000n;\n\nexport const MIN_GAS_PRICE = 10_000_000_000n;\n\nexport const GAS_LIMIT_POV_RATIO = 4;\n\nexport const PRECOMPILE_PARACHAIN_STAKING_ADDRESS = \"0x0000000000000000000000000000000000000800\";\nexport const PRECOMPILE_CROWDLOAN_REWARDS_ADDRESS = \"0x0000000000000000000000000000000000000801\";\nexport const PRECOMPILE_NATIVE_ERC20_ADDRESS = \"0x0000000000000000000000000000000000000802\";\nexport const PRECOMPILE_DEMOCRACY_ADDRESS = \"0x0000000000000000000000000000000000000803\";\nexport const PRECOMPILE_XTOKENS_ADDRESS = \"0x0000000000000000000000000000000000000804\";\nexport const PRECOMPILE_RELAY_ENCODER_ADDRESS = \"0x0000000000000000000000000000000000000805\";\nexport const PRECOMPILE_XCM_TRANSACTOR_ADDRESS_V1 = \"0x0000000000000000000000000000000000000806\";\nexport const PRECOMPILE_AUTHOR_MAPPING_ADDRESS = \"0x0000000000000000000000000000000000000807\";\nexport const PRECOMPILE_BATCH_ADDRESS = \"0x0000000000000000000000000000000000000808\";\nexport const PRECOMPILE_RANDOMNESS_ADDRESS = \"0x0000000000000000000000000000000000000809\";\nexport const PRECOMPILE_CALL_PERMIT_ADDRESS = \"0x000000000000000000000000000000000000080a\";\nexport const PRECOMPILE_PROXY_ADDRESS = \"0x000000000000000000000000000000000000080b\";\nexport const PRECOMPILE_XCM_UTILS_ADDRESS = \"0x000000000000000000000000000000000000080c\";\nexport const PRECOMPILE_XCM_TRANSACTOR_ADDRESS_V2 = \"0x000000000000000000000000000000000000080d\";\nexport const PRECOMPILE_COUNCIL_ADDRESS = \"0x000000000000000000000000000000000000080e\";\nexport const PRECOMPILE_TECH_COMMITTEE_ADDRESS = \"0x000000000000000000000000000000000000080f\";\nexport const PRECOMPILE_TREASURY_COUNCIL_ADDRESS = \"0x0000000000000000000000000000000000000810\";\nexport const PRECOMPILE_DISPATCH_ADDRESS = \"0x0000000000000000000000000000000000000401\";\nexport const PRECOMPILE_REFERENDA_ADDRESS = \"0x0000000000000000000000000000000000000811\";\nexport const PRECOMPILE_CONVICTION_VOTING_ADDRESS = \"0x0000000000000000000000000000000000000812\";\nexport const PRECOMPILE_PREIMAGE_ADDRESS = \"0x0000000000000000000000000000000000000813\";\nexport const PRECOMPILE_OPEN_TECH_COMMITTEE_ADDRESS = \"0x0000000000000000000000000000000000000814\";\nexport const PRECOMPILE_GMP_ADDRESS = \"0x0000000000000000000000000000000000000816\";\n\nexport const PRECOMPILES = {\n  ParachainStaking: \"0x0000000000000000000000000000000000000800\",\n  CrowdloanRewards: \"0x0000000000000000000000000000000000000801\",\n  NativeErc20: [\"0x0000000000000000000000000000000000000802\", \"IERC20\"],\n  Democracy: \"0x0000000000000000000000000000000000000803\",\n  Xtokens: \"0x0000000000000000000000000000000000000804\",\n  RelayEncoder: \"0x0000000000000000000000000000000000000805\",\n  XcmTransactorV1: \"0x0000000000000000000000000000000000000806\",\n  AuthorMapping: \"0x0000000000000000000000000000000000000807\",\n  Batch: \"0x0000000000000000000000000000000000000808\",\n  Randomness: \"0x0000000000000000000000000000000000000809\",\n  CallPermit: \"0x000000000000000000000000000000000000080a\",\n  Proxy: \"0x000000000000000000000000000000000000080b\",\n  XcmUtils: \"0x000000000000000000000000000000000000080c\",\n  XcmTransactorV2: \"0x000000000000000000000000000000000000080d\",\n  Council: [\"0x000000000000000000000000000000000000080e\", \"Collective\"],\n  TechCommittee: [\"0x000000000000000000000000000000000000080f\", \"Collective\"],\n  TreasuryCouncil: [\"0x0000000000000000000000000000000000000810\", \"Collective\"],\n  // DISPATCH: \"0x0000000000000000000000000000000000000401\",\n  Referenda: \"0x0000000000000000000000000000000000000811\",\n  ConvictionVoting: \"0x0000000000000000000000000000000000000812\",\n  Preimage: \"0x0000000000000000000000000000000000000813\",\n  // OpenTechCommittee: \"0x0000000000000000000000000000000000000814\",\n  Gmp: \"0x0000000000000000000000000000000000000816\",\n} as const;\n\nexport const MINUTES = 60 / 12;\nexport const HOURS = MINUTES * 60;\nexport const DAYS = HOURS * 24;\n\nexport const TWO_MINS = 2 * 60 * 1000;\nexport const FIVE_MINS = 5 * 60 * 1000;\nexport const TEN_MINS = 10 * 60 * 1000;\nexport const THIRTY_MINS = 30 * 60 * 1000;\nexport const ONE_HOURS = 60 * 60 * 1000;\nexport const TWO_HOURS = 2 * 60 * 60 * 1000;\nexport const THREE_HOURS = 3 * 60 * 60 * 1000;\nexport const FOUR_HOURS = 4 * 60 * 60 * 1000;\n\nexport const CONTRACT_RANDOMNESS_STATUS_DOES_NOT_EXISTS = 0;\nexport const CONTRACT_RANDOMNESS_STATUS_PENDING = 1;\nexport const CONTRACT_RANDOMNESS_STATUS_READY = 2;\nexport const CONTRACT_RANDOMNESS_STATUS_EXPIRED = 3;\n\nexport const CONTRACT_PROXY_TYPE_ANY = 0;\nexport const CONTRACT_PROXY_TYPE_NON_TRANSFER = 1;\nexport const CONTRACT_PROXY_TYPE_GOVERNANCE = 2;\nexport const CONTRACT_PROXY_TYPE_STAKING = 3;\nexport const CONTRACT_PROXY_TYPE_CANCEL_PROXY = 4;\nexport const CONTRACT_PROXY_TYPE_BALANCES = 5;\nexport const CONTRACT_PROXY_TYPE_AUTHOR_MAPPING = 6;\nexport const CONTRACT_PROXY_TYPE_IDENTITY_JUDGEMENT = 7;\n\nexport const MAX_BLOCK_WEIGHT = 500_000_000_000;\n\n// This is the target fill perbill amount accounting for base extrinsic fee, i.e. 187,000,000\n// Defined as a runtime constant: \"TargetBlockFullness\"\nexport const TARGET_FILL_AMOUNT =\n  ((MAX_BLOCK_WEIGHT * 0.75 * 0.25 - EXTRINSIC_BASE_WEIGHT) / MAX_BLOCK_WEIGHT) * 1_000_000_000;\n\nexport const TARGET_FILL_PERMILL = 0.25 * 1_000_000; // Equivalent to 25%\nexport const WEIGHT_FEE = 50n * 1000n;\n\nexport const RUNTIME_CONSTANTS = {\n  MOONBASE: {\n    MIN_FEE_MULTIPLIER: \"100000000000000000\",\n    MAX_FEE_MULTIPLIER: \"100000000000000000000000\",\n    MIN_BASE_FEE_IN_WEI: \"125000000\",\n    MAX_BASE_FEE_IN_WEI: \"125000000000000\",\n  },\n  MOONRIVER: {\n    MIN_FEE_MULTIPLIER: \"1000000000000000000\",\n    MAX_FEE_MULTIPLIER: \"100000000000000000000000\",\n    MIN_BASE_FEE_IN_WEI: \"1250000000\",\n    MAX_BASE_FEE_IN_WEI: \"125000000000000\",\n  },\n  MOONBEAM: {\n    MIN_FEE_MULTIPLIER: \"1000000000000000000\",\n    MAX_FEE_MULTIPLIER: \"100000000000000000000000\",\n    MIN_BASE_FEE_IN_WEI: \"125000000000\",\n    MAX_BASE_FEE_IN_WEI: \"12500000000000000\",\n  },\n} as const;\n\nexport const DUMMY_REVERT_BYTECODE = \"0x60006000fd\";\n"],"mappings":"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","names":[]}