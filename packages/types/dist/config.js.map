{"version":3,"sources":["../src/config.ts"],"sourcesContent":["import type Bottleneck from \"bottleneck\";\nimport type { LogType } from \"@zombienet/utils\";\n\n/**\n * The main configuration object for Moonwall.\n */\nexport type MoonwallConfig = {\n  /**\n   * The schema for the config.\n   * By default should use: \"https://raw.githubusercontent.com/Moonsong-Labs/moonwall/main/packages/types/config_schema.json\"\n   */\n  $schema?: string;\n\n  /**\n   * A label for the config.\n   */\n  label: string;\n\n  /**\n   * The default timeout for tests.\n   */\n  defaultTestTimeout: number;\n\n  /**\n   * Optional path to a directory containing scripts.\n   */\n  scriptsDir?: string;\n\n  /**\n   * An array of Environment objects for testing.\n   */\n  environments: Environment[];\n\n  /**\n   * Use this to specify additional repos to download binaries from.\n   * Polkadot, Tanssi and Moonbeam are available by default.\n   **/\n  additionalRepos?: RepoSpec[];\n};\n\n/**\n * The environment configuration for testing.\n */\nexport type Environment = {\n  /**\n   * An optional array of reporter types e.g. html, basic, verbose, json etc\n   */\n  reporters?: string[];\n\n  /**\n   * Write test results to a file when the using JSON or HTML reporter.\n   * By providing an object instead of a string you can define individual outputs when using multiple reporters.\n   */\n  reportFile?: string | { [reporterName: string]: string };\n\n  /**\n   * The name of the environment.\n   */\n  name: string;\n\n  /**\n   * Print vitest options to the console.\n   */\n  printVitestOptions?: boolean;\n\n  /**\n   * Description of the environment to display in menus.\n   */\n  description?: string;\n\n  /**\n   * The default timeout for tests and hooks\n   */\n  timeout?: number;\n\n  /**\n   * An array of directories with test files.\n   */\n  testFileDir: string[];\n\n  /**\n   * An optional array of environment variable names.\n   */\n  envVars?: string[];\n\n  /**\n   * The foundation configuration for the environment.\n   */\n  foundation: IFoundation;\n\n  /**\n   * An optional array of included files or directories.\n   */\n  include?: string[];\n\n  /**\n   * An optional array of ProviderConfig objects.\n   */\n  connections?: ProviderConfig[];\n\n  /**\n   * An optional boolean to indicate if multi-threading is enabled.\n   * Optionally, you can specify your own threadPool spec using a PoolOptions config object.\n   * Visit https://vitest.dev/config/#pooloptions for more info\n   */\n  multiThreads?: boolean | number | object;\n\n  /**\n   * Path to directory containing smart contracts for testing against.\n   */\n  contracts?: string;\n\n  /**\n   * An optional array of scripts to run before testing.\n   */\n  runScripts?: string[];\n\n  /**\n   * The privateKey with which to sign and send transactions in createBlock() function.\n   */\n  defaultSigner?: {\n    /**\n     *  Substrate Keyring type\n     */\n    type: \"ethereum\" | \"sr25519\" | \"ed25519\";\n    /**\n     * Hex encoded private key to generate KeyringPair (\"0x..\")\n     */\n    privateKey: string;\n  };\n\n  /**\n   * Toggle whether createBlock() will throw when extrinsic errors inside.\n   */\n  defaultAllowFailures?: boolean;\n\n  /**\n   * Toggle whether createBlock() will finalize blocks by default or not.\n   */\n  defaultFinalization?: boolean;\n\n  /**\n   * A list of test to skip.\n   */\n  skipTests?: SkipTestSpec[];\n\n  /**\n   * An optional object to add extra arguments to the Vitest test runner.\n   *  Use with caution as this will override the default arguments, which\n   * may cause unexpected behaviour.\n   *\n   * Visit https://vitest.dev/config/ for more info\n   */\n  vitestArgs?: Record<string, any>;\n};\n\nexport type SkipTestSpec = {\n  /**\n   * The name of the test to skip. Eg. S22C500\n   */\n  name: string;\n\n  /**\n   * The reason for skipping the test. Must be provided. Eg. https://github.com/org/repo/issues/123.\n   */\n  reason: string;\n\n  /**\n   * The date when the test was skipped. Must be provided and be RFC3339 compliant. Eg. 2021-09-01T00:00:00Z\n   */\n  since: string;\n};\n\n/**\n * @name IFoundation\n * @description The foundation configuration for the environment. It can be of several types including \"dev\", \"chopsticks\", \"zombie\", \"read_only\", or \"fork\".\n */\nexport type IFoundation =\n  | {\n      type: \"dev\";\n      launchSpec: DevLaunchSpec[];\n    }\n  | {\n      type: \"chopsticks\";\n      rtUpgradePath?: string;\n      launchSpec: ChopsticksLaunchSpec[];\n    }\n  | {\n      type: \"zombie\";\n      rtUpgradePath?: string;\n      zombieSpec: ZombieLaunchSpec;\n    }\n  | {\n      type: \"read_only\";\n      launchSpec: ReadOnlyLaunchSpec;\n    };\n\n/**\n * @name EthTransactionType\n * @description The type of Ethereum transaction. Can be \"Legacy\", \"EIP2930\", or \"EIP1559\".\n */\nexport type EthTransactionType = (typeof EthTransactionTypes)[number];\n\nexport const EthTransactionTypes = [\"eip1559\", \"eip2930\", \"legacy\"] as const;\n\n/**\n * @name FoundationType\n * @description The type of foundation configuration. It can be of several types including \"dev\", \"chopsticks\", \"zombie\", \"read_only\", or \"fork\".\n */\nexport type FoundationType = IFoundation[\"type\"];\n\n/**\n * A generic launch specification object.\n */\nexport interface GenericLaunchSpec {\n  /**\n   * The name of the launch spec.\n   */\n  name: string;\n\n  /**\n   * UNUSED\n   */\n  running?: boolean;\n\n  /**\n   * An optional array of options for the launch spec.\n   */\n  options?: string[];\n}\n\n/**\n * A launch specification object for the \"read_only\" foundation type.\n * @extends GenericLaunchSpec\n */\nexport interface ReadOnlyLaunchSpec extends GenericLaunchSpec {\n  /**\n   * Rate limiter options, on by default.\n   * Can be set to false to disable.\n   */\n  rateLimiter?: boolean | Bottleneck.ConstructorOptions;\n\n  /**\n   * Disable runtime version check.\n   * RT Version check is enabled by default.\n   */\n  disableRuntimeVersionCheck?: boolean;\n}\n\n/**\n * A launch specification object for the \"zombie\" foundation type.\n * @extends GenericLaunchSpec\n */\nexport interface ZombieLaunchSpec extends GenericLaunchSpec {\n  /**\n   * Additional configuration for the zombie network\n   */\n  additionalZombieConfig?: OrcOptionsInterface;\n\n  /**\n   * Determines if the default Ethereum provider connections should be disabled.\n   * When set to true, the framework will not automatically connect the Ethereum providers.\n   * Default behavior (when unset or set to false) is to connect with Ethers, Viem & Web3 frameworks.\n   */\n  disableDefaultEthProviders?: boolean;\n\n  /**\n   * Specifies whether the framework should eavesdrop and log WARN, ERROR from the node logs.\n   * If set to true, the eavesdropping on node logs is disabled.\n   * Default behavior (when unset or set to false) is to listen to the logs.\n   */\n  disableLogEavesdropping?: boolean;\n\n  /**\n   * The path to the config file.\n   */\n  configPath: string;\n\n  /**\n   * An optional array of blocks to skip checking.\n   */\n  skipBlockCheck?: string[];\n}\n\n// TODO: Separate single chopsticks network and multi chopsticks into separate interfaces\n/**\n * A launch specification object for the \"chopsticks\" foundation type.\n * @extends GenericLaunchSpec\n */\nexport interface ChopsticksLaunchSpec extends GenericLaunchSpec {\n  /**\n   * The path to the config file.\n   */\n  configPath: string;\n\n  /**\n   * An optional WebSocket port.\n   * Quirk of Chopsticks is that port option is only for single mode not xcm.\n   */\n  wsPort?: number;\n\n  /**\n   * An optional type of either \"relaychain\" or \"parachain\".\n   */\n  type?: \"relaychain\" | \"parachain\";\n\n  /**\n   * An optional WebAssembly override.\n   */\n  wasmOverride?: string;\n\n  /**\n   * An optional flag to NOT throw when the host fails to export a function expected by the runtime.\n   */\n  allowUnresolvedImports?: boolean;\n\n  /**\n   * An optional block building mode, can be \"batch\", \"manual\" or \"instant\".\n   * This is only supported for single mode chopsticks.\n   */\n  buildBlockMode?: \"batch\" | \"manual\" | \"instant\";\n\n  /**\n   * An optional flag to retain node logs from previous runs.\n   */\n  retainAllLogs?: boolean;\n\n  /**\n   * Server listening interface\n   * Added in: https://github.com/AcalaNetwork/chopsticks/pull/826\n   */\n  address?: string;\n}\n\n/**\n * A launch specification object for the \"dev\" foundation type.\n * @extends GenericLaunchSpec\n */\nexport interface DevLaunchSpec extends GenericLaunchSpec {\n  /**\n   * The path to the binary to execute OR the Docker image to use\n   */\n  binPath: string;\n\n  /**\n   * If true, binPath will be treated as a Docker image instead of a local binary\n   */\n  useDocker?: boolean;\n\n  /**\n   * Docker-specific configuration\n   */\n  dockerConfig?: {\n    /**\n     * Additional Docker run arguments (e.g. environment variables, volumes)\n     */\n    runArgs?: string[];\n\n    /**\n     * Docker container name. If not provided, one will be generated\n     */\n    containerName?: string;\n\n    /**\n     * Docker network to connect to. If not provided, the default network will be used\n     */\n    network?: string;\n\n    /**\n     * Port mappings from host to container\n     */\n    exposePorts?: {\n      // The port to connect to on localhost\n      hostPort: number;\n      // The port inside the container\n      internalPort: number;\n    }[];\n  };\n\n  /**\n   * Determines if the default Ethereum provider connections should be disabled.\n   * When set to true, the framework will not automatically connect the Ethereum providers.\n   * Default behavior (when unset or set to false) is to connect with Ethers, Viem & Web3 frameworks.\n   *\n   * Note: This also acts as a feature gate for context methods like createTxn and readPrecompile.\n   */\n  disableDefaultEthProviders?: boolean;\n\n  /**\n   * Launch node using rpc-port parameter instead of ws-port.\n   */\n  newRpcBehaviour?: boolean;\n\n  /**\n   * BETA: Default Fork options for the node (overriden by per-test fork options)\n   */\n  defaultForkConfig?: ForkConfig;\n\n  /**\n   * Port configuration\n   */\n  ports?: {\n    /**\n     * The port for peer-to-peer (P2P) communication.\n     */\n    p2pPort: number;\n\n    /**\n     * The port for remote procedure call (RPC).\n     */\n    rpcPort: number;\n\n    /**\n     * The port for WebSocket communication (soon deprecated)\n     */\n    wsPort: number;\n  };\n\n  /**\n   * An optional flag to retain node logs from previous runs.\n   */\n  retainAllLogs?: boolean;\n}\n\n/**\n * The configuration object for a provider.\n */\nexport interface ProviderConfig {\n  /**\n   * The name of the provider.\n   */\n  name: string;\n\n  /**\n   * The type of the provider.\n   */\n  type: ProviderType;\n\n  /**\n   * An array of endpoint URLs.\n   */\n  endpoints: string[];\n\n  /**\n   * An optional RPC bundle.\n   */\n  rpc?: IRpcBundle;\n\n  /**\n   * An optional collection of additional types.\n   */\n  additionalTypes?: TypesBundle;\n}\n\n/**\n * @name ProviderType\n * @description The type of provider. Can be \"polkadotJs\", \"ethers\", \"web3\", \"viem\", \"papi\"\n */\nexport type ProviderType = \"polkadotJs\" | \"ethers\" | \"web3\" | \"viem\" | \"papi\";\n\n/**\n * @name ZombieNodeType\n * @description The type of Zombie node. Can be \"relaychain\" or \"parachain\n */\nexport type ZombieNodeType = \"relaychain\" | \"parachain\";\n\n/**\n * @name IRpcParam\n * @description Interface for defining RPC parameters.\n * @property name - The name of the RPC parameter.\n * @property type - The type of the RPC parameter.\n * @property isOptional - A flag indicating whether the RPC parameter is optional.\n */\nexport interface IRpcParam {\n  name: string;\n  type: string;\n  isOptional?: boolean;\n}\n\n/**\n * @name IRpcMethod\n * @description Interface for defining RPC methods.\n * @property description - A brief description of the RPC method.\n * @property params - An array of IRpcParam defining the parameters of the method.\n * @property type - The return type of the RPC method.\n */\nexport interface IRpcMethod {\n  description: string;\n  params: IRpcParam[];\n  type: string;\n}\n\n/**\n * @name IRpcModule\n * @description Interface for defining RPC modules.\n * It is a dictionary where each key is a method name and the value is an IRpcMethod.\n */\nexport interface IRpcModule {\n  [methodName: string]: IRpcMethod;\n}\n\n/**\n * @name IRpcBundle\n * @description Interface for defining RPC bundles.\n * It is a dictionary where each key is a module name and the value is an IRpcModule.\n */\nexport interface IRpcBundle {\n  [moduleName: string]: IRpcModule;\n}\n\n/**\n * Represents a collection of GenericData.\n * It's an object where each key is a string and the corresponding value is a GenericData object.\n *\n * @example\n * ```typescript\n * const example: TypesBundle = {\n *   ContainerChainGenesisData: {\n *     id: \"Vec<u8>\"\n *   }\n * };\n * ```\n */\nexport type TypesBundle = {\n  [key: string]: GenericData;\n};\n\nexport type GenericData = {\n  [key: string]: string;\n};\n\n// CopyPasta from https://github.com/paritytech/zombienet/blob/f929641e13e7591b7336c4a256756aa04eb2a14c/javascript/packages/orchestrator/src/orchestrator.ts#L61\n// Until it's exposed in the orchestrator types\nexport interface OrcOptionsInterface {\n  monitor?: boolean;\n  spawnConcurrency?: number;\n  inCI?: boolean;\n  dir?: string;\n  force?: boolean;\n  logType?: LogType;\n  setGlobalNetwork?: (network: object) => void;\n}\n\n/**\n * `RepoSpec` type represents the configuration required to download binaries\n * from a project's GitHub repository.\n *\n * @property {string} name - A unique identifier or name for the repo configuration.\n * @property {string} ghAuthor - The GitHub username or organization under which the repository resides.\n * @property {string} ghRepo - The GitHub repository name.\n * @property {Bin[]} binaries - An array of binary configurations to be downloaded.\n *\n * @example\n * {\n *   \"name\": \"astar\",\n *   \"ghAuthor\": \"AstarNetwork\",\n *   \"ghRepo\": \"Astar\",\n *   \"binaries\": [\n *     {\n *       \"name\": \"astar-collator*ubuntu-x86*\",\n *       \"type\": \"tar\",\n *       \"defaultArgs\": [\"--dev\", \"--sealing=manual\", \"--no-hardware-benchmarks\", \"--no-telemetry\"]\n *     }\n *   ]\n * }\n */\nexport type RepoSpec = {\n  name: string;\n  ghAuthor: string;\n  ghRepo: string;\n  binaries: Bin[];\n};\n\n/**\n * `Bin` type defines the binary configurations within a `RepoSpec`.\n *\n * @property {string} name - The name or pattern to identify the binary.\n * @property {string[]?} defaultArgs - An optional array of default arguments to be used with the binary.\n *\n * @example\n * {\n *   \"name\": \"hydration\"\n * }\n *\n * @example\n * {\n *   \"name\": \"astar-collator*ubuntu-x86*\",\n *   \"defaultArgs\": [\"--dev\", \"--sealing=manual\", \"--no-hardware-benchmarks\", \"--no-telemetry\"]\n * }\n */\nexport type Bin = {\n  name: string;\n  defaultArgs?: string[];\n};\n\nexport type ForkConfig = {\n  /**\n   * The URL to fork from\n   */\n  url: string;\n  /**\n   * The block hash to fork from\n   */\n  blockHash?: string;\n  /**\n   * The state override path (optional)\n   */\n  stateOverridePath?: string;\n  /**\n   * Turns on trace logging for LazyLoading service (optional)\n   */\n  verbose?: boolean;\n};\n"],"mappings":";AA2MO,IAAM,sBAAsB,CAAC,WAAW,WAAW,QAAQ;","names":[]}