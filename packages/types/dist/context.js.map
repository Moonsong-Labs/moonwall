{"version":3,"sources":["../src/context.ts"],"sourcesContent":["import \"@polkadot/api-base/types/events\";\nimport type { ApiPromise, WsProvider } from \"@polkadot/api\";\nimport type { ApiTypes, AugmentedEvent, SubmittableExtrinsic } from \"@polkadot/api-base/types\";\nimport type { KeyringPair } from \"@polkadot/keyring/types\";\nimport type { GenericExtrinsic } from \"@polkadot/types\";\nimport type { EventRecord } from \"@polkadot/types/interfaces\";\nimport type { AnyTuple, RegistryError } from \"@polkadot/types/types\";\nimport type { Logger } from \"pino\";\nimport type { Wallet } from \"ethers\";\nimport type { Web3 } from \"web3\";\nimport type { FoundationType, ProviderType } from \"./config\";\nimport type { CallType } from \"./foundations\";\nimport type { ViemClient } from \"./runner\";\nimport type { PolkadotClient } from \"polkadot-api\";\n\n/**\n * @name MoonwallEnvironment\n * @description The Moonwall environment object.\n * @property name - The name of the environment.\n * @property providers - An array of MoonwallProvider objects.\n * @property foundationType - The type of foundation in use.\n * @property nodes - An array of Node objects.\n */\nexport type MoonwallEnvironment = {\n  name: string;\n  providers: MoonwallProvider[];\n  foundationType: FoundationType;\n  nodes: Node[];\n};\n\n/**\n * @name MoonwallProvider\n * @description The Moonwall provider object.\n * @property name - The name of the provider.\n * @property type - The type of the provider.\n * @property connect - A function that returns a Promise resolving to a connected API instance.\n * @property ws - An optional function returning a WebSocket provider.\n */\nexport interface MoonwallProvider {\n  name: string;\n  type: ProviderType;\n  connect: () =>\n    | Promise<ApiPromise>\n    | Wallet\n    | Web3<any>\n    | Promise<ViemClient>\n    | PolkadotClient\n    | null;\n  ws?: () => WsProvider;\n}\n\n/**\n * @name ConnectedProvider\n * @description The connected provider object.\n * @property name - The name of the provider.\n * @property type - The type of the provider.\n * @property api - The connected API instance.\n * @property disconnect - A function that returns a Promise resolving when the provider is disconnected.\n * @property greet - A function that returns a greeting message or an object containing runtime information.\n */\nexport interface ConnectedProvider {\n  name: string;\n  type: ProviderType;\n  api: ProviderApi;\n  disconnect: () => Promise<void> | void;\n  greet: () => Promise<void> | Promise<{ rtName: string; rtVersion: number }>;\n}\n\nexport type ProviderApi = {\n  [P in keyof ProviderMap]: ProviderMap[P];\n}[keyof ProviderMap];\n\nexport type ProviderMap = {\n  polkadotJs: ApiPromise;\n  ethers: Wallet;\n  web3: Web3;\n  moon: ApiPromise;\n  viem: ViemClient;\n  papi: PolkadotClient;\n};\n\n/**\n * @name Node\n * @description The Node object.\n * @property name - The optional name of the node.\n * @property cmd - The command to start the node.\n * @property args - The arguments for the command.\n * @property rtUpgradePath - The optional runtime upgrade path.\n * @property launch - UNUSED\n */\nexport type Node = {\n  name?: string;\n  cmd: string;\n  args: string[];\n  rtUpgradePath?: string;\n  launch?: boolean;\n};\n\nexport interface ChopsticksBlockCreation {\n  providerName?: string;\n  count?: number;\n  to?: number;\n  expectEvents?: AugmentedEvent<ApiTypes>[];\n  allowFailures?: boolean;\n  logger?: Logger;\n}\n\nexport interface BlockCreation {\n  parentHash?: string;\n  finalize?: boolean;\n  allowFailures?: boolean;\n  expectEvents?: AugmentedEvent<ApiTypes>[];\n  logger?: Logger;\n  signer?: { type: \"ethereum\" | \"sr25519\" | \"ed25519\"; privateKey: string } | KeyringPair;\n}\n\nexport interface BlockCreationResponse<\n  ApiType extends ApiTypes,\n  Calls extends CallType<ApiType> | CallType<ApiType>[],\n> {\n  block: {\n    duration: number;\n    hash: string;\n    proofSize?: number;\n  };\n  result?: Calls extends (string | SubmittableExtrinsic<ApiType>)[]\n    ? ExtrinsicCreation[]\n    : ExtrinsicCreation;\n}\n\nexport interface ExtrinsicCreation {\n  extrinsic: GenericExtrinsic<AnyTuple> | null;\n  events: EventRecord[];\n  error: RegistryError | undefined;\n  successful: boolean;\n  hash: string;\n}\n"],"mappings":";AAAA,OAAO;","names":[]}